{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming Projects\\\\twitch-chat-combiner-js\\\\src\\\\Components\\\\Messages.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst tmi = require(\"tmi.js\");\n\nlet id = 0;\nexport default _s(props => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  let tempArray = [];\n  const [chatClient, setChatClient] = useState();\n  useEffect(() => {\n    let client = new tmi.Client({\n      channels: [\"pigeonapology\"]\n    });\n    client.connect();\n    client.on('message', (channel, tags, message, self) => {\n      let tempID = id;\n      id += 1;\n      tempArray.push({\n        value: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            style: {\n              color: \"red\"\n            },\n            children: [channel, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            style: {\n              color: tags.color\n            },\n            children: [tags[\"display-name\"], \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 68\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 128\n          }, this)]\n        }, void 0, true),\n        key: tempID\n      });\n      console.log(`${channel}: ${tags[\"display-name\"]}: ${message}`);\n      console.log(tags);\n      setMessages(tempArray);\n      console.log(messages);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(e => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: e.value\n      }, e.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 38\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"ljc2kao92GSa0YiBxsW/ik6vgA8=\");","map":{"version":3,"sources":["D:/Programming Projects/twitch-chat-combiner-js/src/Components/Messages.tsx"],"names":["useState","useEffect","tmi","require","id","props","messages","setMessages","tempArray","chatClient","setChatClient","client","Client","channels","connect","on","channel","tags","message","self","tempID","push","value","color","key","console","log","map","e"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,EAAE,GAAG,CAAT;AAEA,kBAAgBC,KAAD,IAAiB;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAIQ,SAAe,GAAG,EAAtB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,EAA5C;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIU,MAAM,GAAG,IAAIT,GAAG,CAACU,MAAR,CAAe;AACxBC,MAAAA,QAAQ,EAAE,CAAC,eAAD;AADc,KAAf,CAAb;AAEAF,IAAAA,MAAM,CAACG,OAAP;AACAH,IAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,CAACC,OAAD,EAAmBC,IAAnB,EAA8BC,OAA9B,EAA+CC,IAA/C,KAA4D;AAE7E,UAAIC,MAAM,GAAGhB,EAAb;AACAA,MAAAA,EAAE,IAAI,CAAN;AACAI,MAAAA,SAAS,CAACa,IAAV,CACI;AAACC,QAAAA,KAAK,eAAE;AAAA,kCAAE;AAAG,YAAA,KAAK,EAAE;AAACC,cAAAA,KAAK,EAAE;AAAR,aAAV;AAAA,uBAA2BP,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAF,eAA2C;AAAG,YAAA,KAAK,EAAE;AAACO,cAAAA,KAAK,EAAEN,IAAI,CAACM;AAAb,aAAV;AAAA,uBAAgCN,IAAI,CAAC,cAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3C,oBAAuG;AAAA,sBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAAvG;AAAA,wBAAR;AACAM,QAAAA,GAAG,EAAEJ;AADL,OADJ;AAIAK,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEV,OAAQ,KAAIC,IAAI,CAAC,cAAD,CAAiB,KAAIC,OAAQ,EAA5D;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAV,MAAAA,WAAW,CAACC,SAAD,CAAX;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACH,KAZD;AAcH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACI;AAAA,2BACA;AAAA,gBACKA,QAAQ,CAACqB,GAAT,CAAcC,CAAD,iBAAW;AAAA,kBAAiBA,CAAC,CAACN;AAAnB,SAASM,CAAC,CAACJ,GAAX;AAAA;AAAA;AAAA;AAAA,cAAxB;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAOH,CA/BD","sourcesContent":["import { useState, useEffect } from \"react\";\r\nconst tmi = require(\"tmi.js\");\r\nlet id = 0\r\n\r\nexport default (props : any) => {\r\n    const [messages, setMessages] = useState([])\r\n    let tempArray : any = [];\r\n    const [chatClient, setChatClient] = useState();\r\n    useEffect(()=>{\r\n        let client = new tmi.Client({\r\n            channels: [\"pigeonapology\"]})\r\n        client.connect();\r\n        client.on('message', (channel : string, tags: any, message: string, self:any) => {\r\n            \r\n            let tempID = id;\r\n            id += 1;\r\n            tempArray.push(\r\n                {value: <><b style={{color: \"red\"}}>{channel}: </b><b style={{color: tags.color}}>{tags[\"display-name\"]}: </b> <p>{message}</p></>,\r\n                key: tempID}\r\n                )\r\n            console.log(`${channel}: ${tags[\"display-name\"]}: ${message}`)\r\n            console.log(tags)\r\n            setMessages(tempArray)\r\n            console.log(messages)\r\n        });\r\n    \r\n    }, [])\r\n    \r\n    return (\r\n        <>\r\n        <ul>\r\n            {messages.map((e:any) => <li key={e.key}>{e.value}</li>)}\r\n        </ul>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}