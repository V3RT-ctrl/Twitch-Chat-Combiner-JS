{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming Projects\\\\twitch-chat-combiner-js\\\\src\\\\Components\\\\Messages.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst tmi = require(\"tmi.js\");\n\nlet id = 0;\nexport default _s(props => {\n  _s();\n\n  const client = new tmi.Client({\n    channels: [\"pigeonapology\"]\n  });\n  const [messages, setMessages] = useState([]);\n  let tempArray = [];\n  client.connect();\n  client.on('message', (channel, tags, message, self) => {\n    // \"Alca: Hello, World!\"\n    let tempID = id;\n    id += 1;\n    tempArray.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          color: \"red\"\n        },\n        children: [channel, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          color: \"green\"\n        },\n        children: [tags, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 56\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 97\n      }, this)]\n    }, void 0, true));\n    setMessages(tempArray);\n    console.log(messages);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");","map":{"version":3,"sources":["D:/Programming Projects/twitch-chat-combiner-js/src/Components/Messages.tsx"],"names":["useState","tmi","require","id","props","client","Client","channels","messages","setMessages","tempArray","connect","on","channel","tags","message","self","tempID","push","color","console","log","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,EAAE,GAAG,CAAT;AAEA,kBAAgBC,KAAD,IAAiB;AAAA;;AAC5B,QAAMC,MAAM,GAAG,IAAIJ,GAAG,CAACK,MAAR,CAAe;AAC1BC,IAAAA,QAAQ,EAAE,CAAC,eAAD;AADgB,GAAf,CAAf;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAIU,SAAe,GAAG,EAAtB;AAEAL,EAAAA,MAAM,CAACM,OAAP;AACAN,EAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,CAACC,OAAD,EAAmBC,IAAnB,EAA8BC,OAA9B,EAA+CC,IAA/C,KAA4D;AAC7E;AACA,QAAIC,MAAM,GAAGd,EAAb;AACAA,IAAAA,EAAE,IAAI,CAAN;AACAO,IAAAA,SAAS,CAACQ,IAAV,eACI;AAAA,8BAAE;AAAG,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAV;AAAA,mBAA2BN,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,eAA2C;AAAG,QAAA,KAAK,EAAE;AAACM,UAAAA,KAAK,EAAE;AAAR,SAAV;AAAA,mBAA6BL,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3C,oBAAoF;AAAA,kBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,cAApF;AAAA,oBADJ;AAGAN,IAAAA,WAAW,CAACC,SAAD,CAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACH,GATD;AAUA,sBACI;AAAA,2BACA;AAAA,gBACKA,QAAQ,CAACc,GAAT,CAAcP,OAAD,iBAAa;AAAA,kBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,cAA1B;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAOH,CAzBD","sourcesContent":["import { useState } from \"react\";\r\nconst tmi = require(\"tmi.js\");\r\nlet id = 0\r\n\r\nexport default (props : any) => {\r\n    const client = new tmi.Client({\r\n        channels: [\"pigeonapology\"]\r\n    });\r\n    const [messages, setMessages] = useState([])\r\n    let tempArray : any = [];\r\n\r\n    client.connect();\r\n    client.on('message', (channel : string, tags: any, message: string, self:any) => {\r\n        // \"Alca: Hello, World!\"\r\n        let tempID = id;\r\n        id += 1;\r\n        tempArray.push(\r\n            <><b style={{color: \"red\"}}>{channel}: </b><b style={{color: \"green\"}}>{tags}: </b> <p>{message}</p></>\r\n        )\r\n        setMessages(tempArray)\r\n        console.log(messages)\r\n    });\r\n    return (\r\n        <>\r\n        <ul>\r\n            {messages.map((message) => <li >{message}</li>)}\r\n        </ul>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}