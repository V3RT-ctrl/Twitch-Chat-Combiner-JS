{"ast":null,"code":"const _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\n\nconst _WebSocket = _global.WebSocket || require('ws');\n\nconst _fetch = _global.fetch || require('node-fetch');\n\nconst api = require('./api');\n\nconst commands = require('./commands');\n\nconst EventEmitter = require('./events').EventEmitter;\n\nconst logger = require('./logger');\n\nconst parse = require('./parser');\n\nconst Queue = require('./timer');\n\nconst _ = require('./utils');\n\nlet _apiWarned = false; // Client instance..\n\nconst client = function client(opts) {\n  if (this instanceof client === false) {\n    return new client(opts);\n  }\n\n  this.opts = _.get(opts, {});\n  this.opts.channels = this.opts.channels || [];\n  this.opts.connection = this.opts.connection || {};\n  this.opts.identity = this.opts.identity || {};\n  this.opts.options = this.opts.options || {};\n  this.clientId = _.get(this.opts.options.clientId, null);\n  this._globalDefaultChannel = _.channel(_.get(this.opts.options.globalDefaultChannel, '#tmijs'));\n  this._skipMembership = _.get(this.opts.options.skipMembership, false);\n  this._skipUpdatingEmotesets = _.get(this.opts.options.skipUpdatingEmotesets, false);\n  this._updateEmotesetsTimer = null;\n  this._updateEmotesetsTimerDelay = _.get(this.opts.options.updateEmotesetsTimer, 60000);\n  this.maxReconnectAttempts = _.get(this.opts.connection.maxReconnectAttempts, Infinity);\n  this.maxReconnectInterval = _.get(this.opts.connection.maxReconnectInterval, 30000);\n  this.reconnect = _.get(this.opts.connection.reconnect, true);\n  this.reconnectDecay = _.get(this.opts.connection.reconnectDecay, 1.5);\n  this.reconnectInterval = _.get(this.opts.connection.reconnectInterval, 1000);\n  this.reconnecting = false;\n  this.reconnections = 0;\n  this.reconnectTimer = this.reconnectInterval;\n  this.secure = _.get(this.opts.connection.secure, !this.opts.connection.server && !this.opts.connection.port); // Raw data and object for emote-sets..\n\n  this.emotes = '';\n  this.emotesets = {};\n  this.channels = [];\n  this.currentLatency = 0;\n  this.globaluserstate = {};\n  this.lastJoined = '';\n  this.latency = new Date();\n  this.moderators = {};\n  this.pingLoop = null;\n  this.pingTimeout = null;\n  this.reason = '';\n  this.username = '';\n  this.userstate = {};\n  this.wasCloseCalled = false;\n  this.ws = null; // Create the logger..\n\n  let level = 'error';\n\n  if (this.opts.options.debug) {\n    level = 'info';\n  }\n\n  this.log = this.opts.logger || logger;\n\n  try {\n    logger.setLevel(level);\n  } catch (err) {} // Format the channel names..\n\n\n  this.opts.channels.forEach((part, index, theArray) => theArray[index] = _.channel(part));\n  EventEmitter.call(this);\n  this.setMaxListeners(0);\n};\n\n_.inherits(client, EventEmitter); // Put all commands in prototype..\n\n\nfor (const methodName in commands) {\n  client.prototype[methodName] = commands[methodName];\n} // Emit multiple events..\n\n\nclient.prototype.emits = function emits(types, values) {\n  for (let i = 0; i < types.length; i++) {\n    const val = i < values.length ? values[i] : values[values.length - 1];\n    this.emit.apply(this, [types[i]].concat(val));\n  }\n};\n/** @deprecated */\n\n\nclient.prototype.api = function () {\n  if (!_apiWarned) {\n    this.log.warn('Client.prototype.api is deprecated and will be removed for version 2.0.0');\n    _apiWarned = true;\n  }\n\n  api(...arguments);\n}; // Handle parsed chat server message..\n\n\nclient.prototype.handleMessage = function handleMessage(message) {\n  if (!message) {\n    return;\n  }\n\n  if (this.listenerCount('raw_message')) {\n    this.emit('raw_message', JSON.parse(JSON.stringify(message)), message);\n  }\n\n  const channel = _.channel(_.get(message.params[0], null));\n\n  let msg = _.get(message.params[1], null);\n\n  const msgid = _.get(message.tags['msg-id'], null); // Parse badges, badge-info and emotes..\n\n\n  const tags = message.tags = parse.badges(parse.badgeInfo(parse.emotes(message.tags))); // Transform IRCv3 tags..\n\n  for (const key in tags) {\n    if (key === 'emote-sets' || key === 'ban-duration' || key === 'bits') {\n      continue;\n    }\n\n    let value = tags[key];\n\n    if (typeof value === 'boolean') {\n      value = null;\n    } else if (value === '1') {\n      value = true;\n    } else if (value === '0') {\n      value = false;\n    } else if (typeof value === 'string') {\n      value = _.unescapeIRC(value);\n    }\n\n    tags[key] = value;\n  } // Messages with no prefix..\n\n\n  if (message.prefix === null) {\n    switch (message.command) {\n      // Received PING from server..\n      case 'PING':\n        this.emit('ping');\n\n        if (this._isConnected()) {\n          this.ws.send('PONG');\n        }\n\n        break;\n      // Received PONG from server, return current latency..\n\n      case 'PONG':\n        {\n          const currDate = new Date();\n          this.currentLatency = (currDate.getTime() - this.latency.getTime()) / 1000;\n          this.emits(['pong', '_promisePing'], [[this.currentLatency]]);\n          clearTimeout(this.pingTimeout);\n          break;\n        }\n\n      default:\n        this.log.warn(`Could not parse message with no prefix:\\n${JSON.stringify(message, null, 4)}`);\n        break;\n    }\n  } // Messages with \"tmi.twitch.tv\" as a prefix..\n  else if (message.prefix === 'tmi.twitch.tv') {\n    switch (message.command) {\n      case '002':\n      case '003':\n      case '004':\n      case '372':\n      case '375':\n      case 'CAP':\n        break;\n      // Retrieve username from server..\n\n      case '001':\n        this.username = message.params[0];\n        break;\n      // Connected to server..\n\n      case '376':\n        {\n          this.log.info('Connected to server.');\n          this.userstate[this._globalDefaultChannel] = {};\n          this.emits(['connected', '_promiseConnect'], [[this.server, this.port], [null]]);\n          this.reconnections = 0;\n          this.reconnectTimer = this.reconnectInterval; // Set an internal ping timeout check interval..\n\n          this.pingLoop = setInterval(() => {\n            // Make sure the connection is opened before sending the message..\n            if (this._isConnected()) {\n              this.ws.send('PING');\n            }\n\n            this.latency = new Date();\n            this.pingTimeout = setTimeout(() => {\n              if (this.ws !== null) {\n                this.wasCloseCalled = false;\n                this.log.error('Ping timeout.');\n                this.ws.close();\n                clearInterval(this.pingLoop);\n                clearTimeout(this.pingTimeout);\n                clearTimeout(this._updateEmotesetsTimer);\n              }\n            }, _.get(this.opts.connection.timeout, 9999));\n          }, 60000); // Join all the channels from the config with an interval..\n\n          let joinInterval = _.get(this.opts.options.joinInterval, 2000);\n\n          if (joinInterval < 300) {\n            joinInterval = 300;\n          }\n\n          const joinQueue = new Queue(joinInterval);\n          const joinChannels = [...new Set([...this.opts.channels, ...this.channels])];\n          this.channels = [];\n\n          for (let i = 0; i < joinChannels.length; i++) {\n            const channel = joinChannels[i];\n            joinQueue.add(() => {\n              if (this._isConnected()) {\n                this.join(channel).catch(err => this.log.error(err));\n              }\n            });\n          }\n\n          joinQueue.next();\n          break;\n        }\n      // https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice\n\n      case 'NOTICE':\n        {\n          const nullArr = [null];\n          const noticeArr = [channel, msgid, msg];\n          const msgidArr = [msgid];\n          const channelTrueArr = [channel, true];\n          const channelFalseArr = [channel, false];\n          const noticeAndNull = [noticeArr, nullArr];\n          const noticeAndMsgid = [noticeArr, msgidArr];\n          const basicLog = `[${channel}] ${msg}`;\n\n          switch (msgid) {\n            // This room is now in subscribers-only mode.\n            case 'subs_on':\n              this.log.info(`[${channel}] This room is now in subscribers-only mode.`);\n              this.emits(['subscriber', 'subscribers', '_promiseSubscribers'], [channelTrueArr, channelTrueArr, nullArr]);\n              break;\n            // This room is no longer in subscribers-only mode.\n\n            case 'subs_off':\n              this.log.info(`[${channel}] This room is no longer in subscribers-only mode.`);\n              this.emits(['subscriber', 'subscribers', '_promiseSubscribersoff'], [channelFalseArr, channelFalseArr, nullArr]);\n              break;\n            // This room is now in emote-only mode.\n\n            case 'emote_only_on':\n              this.log.info(`[${channel}] This room is now in emote-only mode.`);\n              this.emits(['emoteonly', '_promiseEmoteonly'], [channelTrueArr, nullArr]);\n              break;\n            // This room is no longer in emote-only mode.\n\n            case 'emote_only_off':\n              this.log.info(`[${channel}] This room is no longer in emote-only mode.`);\n              this.emits(['emoteonly', '_promiseEmoteonlyoff'], [channelFalseArr, nullArr]);\n              break;\n            // Do not handle slow_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\n\n            case 'slow_on':\n            case 'slow_off':\n              break;\n            // Do not handle followers_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\n\n            case 'followers_on_zero':\n            case 'followers_on':\n            case 'followers_off':\n              break;\n            // This room is now in r9k mode.\n\n            case 'r9k_on':\n              this.log.info(`[${channel}] This room is now in r9k mode.`);\n              this.emits(['r9kmode', 'r9kbeta', '_promiseR9kbeta'], [channelTrueArr, channelTrueArr, nullArr]);\n              break;\n            // This room is no longer in r9k mode.\n\n            case 'r9k_off':\n              this.log.info(`[${channel}] This room is no longer in r9k mode.`);\n              this.emits(['r9kmode', 'r9kbeta', '_promiseR9kbetaoff'], [channelFalseArr, channelFalseArr, nullArr]);\n              break;\n            // The moderators of this room are: [..., ...]\n\n            case 'room_mods':\n              {\n                const listSplit = msg.split(': ');\n                const mods = (listSplit.length > 1 ? listSplit[1] : '').toLowerCase().split(', ').filter(n => n);\n                this.emits(['_promiseMods', 'mods'], [[null, mods], [channel, mods]]);\n                break;\n              }\n            // There are no moderators for this room.\n\n            case 'no_mods':\n              this.emits(['_promiseMods', 'mods'], [[null, []], [channel, []]]);\n              break;\n            // The VIPs of this channel are: [..., ...]\n\n            case 'vips_success':\n              {\n                if (msg.endsWith('.')) {\n                  msg = msg.slice(0, -1);\n                }\n\n                const listSplit = msg.split(': ');\n                const vips = (listSplit.length > 1 ? listSplit[1] : '').toLowerCase().split(', ').filter(n => n);\n                this.emits(['_promiseVips', 'vips'], [[null, vips], [channel, vips]]);\n                break;\n              }\n            // There are no VIPs for this room.\n\n            case 'no_vips':\n              this.emits(['_promiseVips', 'vips'], [[null, []], [channel, []]]);\n              break;\n            // Ban command failed..\n\n            case 'already_banned':\n            case 'bad_ban_admin':\n            case 'bad_ban_anon':\n            case 'bad_ban_broadcaster':\n            case 'bad_ban_global_mod':\n            case 'bad_ban_mod':\n            case 'bad_ban_self':\n            case 'bad_ban_staff':\n            case 'usage_ban':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseBan'], noticeAndMsgid);\n              break;\n            // Ban command success..\n\n            case 'ban_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseBan'], noticeAndNull);\n              break;\n            // Clear command failed..\n\n            case 'usage_clear':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseClear'], noticeAndMsgid);\n              break;\n            // Mods command failed..\n\n            case 'usage_mods':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseMods'], [noticeArr, [msgid, []]]);\n              break;\n            // Mod command success..\n\n            case 'mod_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseMod'], noticeAndNull);\n              break;\n            // VIPs command failed..\n\n            case 'usage_vips':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseVips'], [noticeArr, [msgid, []]]);\n              break;\n            // VIP command failed..\n\n            case 'usage_vip':\n            case 'bad_vip_grantee_banned':\n            case 'bad_vip_grantee_already_vip':\n            case 'bad_vip_max_vips_reached':\n            case 'bad_vip_achievement_incomplete':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseVip'], [noticeArr, [msgid, []]]);\n              break;\n            // VIP command success..\n\n            case 'vip_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseVip'], noticeAndNull);\n              break;\n            // Mod command failed..\n\n            case 'usage_mod':\n            case 'bad_mod_banned':\n            case 'bad_mod_mod':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseMod'], noticeAndMsgid);\n              break;\n            // Unmod command success..\n\n            case 'unmod_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnmod'], noticeAndNull);\n              break;\n            // Unvip command success...\n\n            case 'unvip_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnvip'], noticeAndNull);\n              break;\n            // Unmod command failed..\n\n            case 'usage_unmod':\n            case 'bad_unmod_mod':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnmod'], noticeAndMsgid);\n              break;\n            // Unvip command failed..\n\n            case 'usage_unvip':\n            case 'bad_unvip_grantee_not_vip':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnvip'], noticeAndMsgid);\n              break;\n            // Color command success..\n\n            case 'color_changed':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseColor'], noticeAndNull);\n              break;\n            // Color command failed..\n\n            case 'usage_color':\n            case 'turbo_only_color':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseColor'], noticeAndMsgid);\n              break;\n            // Commercial command success..\n\n            case 'commercial_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseCommercial'], noticeAndNull);\n              break;\n            // Commercial command failed..\n\n            case 'usage_commercial':\n            case 'bad_commercial_error':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseCommercial'], noticeAndMsgid);\n              break;\n            // Host command success..\n\n            case 'hosts_remaining':\n              {\n                this.log.info(basicLog);\n                const remainingHost = !isNaN(msg[0]) ? parseInt(msg[0]) : 0;\n                this.emits(['notice', '_promiseHost'], [noticeArr, [null, ~~remainingHost]]);\n                break;\n              }\n            // Host command failed..\n\n            case 'bad_host_hosting':\n            case 'bad_host_rate_exceeded':\n            case 'bad_host_error':\n            case 'usage_host':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseHost'], [noticeArr, [msgid, null]]);\n              break;\n            // r9kbeta command failed..\n\n            case 'already_r9k_on':\n            case 'usage_r9k_on':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseR9kbeta'], noticeAndMsgid);\n              break;\n            // r9kbetaoff command failed..\n\n            case 'already_r9k_off':\n            case 'usage_r9k_off':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseR9kbetaoff'], noticeAndMsgid);\n              break;\n            // Timeout command success..\n\n            case 'timeout_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseTimeout'], noticeAndNull);\n              break;\n\n            case 'delete_message_success':\n              this.log.info(`[${channel} ${msg}]`);\n              this.emits(['notice', '_promiseDeletemessage'], noticeAndNull);\n              break;\n            // Subscribersoff command failed..\n\n            case 'already_subs_off':\n            case 'usage_subs_off':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseSubscribersoff'], noticeAndMsgid);\n              break;\n            // Subscribers command failed..\n\n            case 'already_subs_on':\n            case 'usage_subs_on':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseSubscribers'], noticeAndMsgid);\n              break;\n            // Emoteonlyoff command failed..\n\n            case 'already_emote_only_off':\n            case 'usage_emote_only_off':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseEmoteonlyoff'], noticeAndMsgid);\n              break;\n            // Emoteonly command failed..\n\n            case 'already_emote_only_on':\n            case 'usage_emote_only_on':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseEmoteonly'], noticeAndMsgid);\n              break;\n            // Slow command failed..\n\n            case 'usage_slow_on':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseSlow'], noticeAndMsgid);\n              break;\n            // Slowoff command failed..\n\n            case 'usage_slow_off':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseSlowoff'], noticeAndMsgid);\n              break;\n            // Timeout command failed..\n\n            case 'usage_timeout':\n            case 'bad_timeout_admin':\n            case 'bad_timeout_anon':\n            case 'bad_timeout_broadcaster':\n            case 'bad_timeout_duration':\n            case 'bad_timeout_global_mod':\n            case 'bad_timeout_mod':\n            case 'bad_timeout_self':\n            case 'bad_timeout_staff':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseTimeout'], noticeAndMsgid);\n              break;\n            // Unban command success..\n            // Unban can also be used to cancel an active timeout.\n\n            case 'untimeout_success':\n            case 'unban_success':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnban'], noticeAndNull);\n              break;\n            // Unban command failed..\n\n            case 'usage_unban':\n            case 'bad_unban_no_ban':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnban'], noticeAndMsgid);\n              break;\n            // Delete command failed..\n\n            case 'usage_delete':\n            case 'bad_delete_message_error':\n            case 'bad_delete_message_broadcaster':\n            case 'bad_delete_message_mod':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseDeletemessage'], noticeAndMsgid);\n              break;\n            // Unhost command failed..\n\n            case 'usage_unhost':\n            case 'not_hosting':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseUnhost'], noticeAndMsgid);\n              break;\n            // Whisper command failed..\n\n            case 'whisper_invalid_login':\n            case 'whisper_invalid_self':\n            case 'whisper_limit_per_min':\n            case 'whisper_limit_per_sec':\n            case 'whisper_restricted':\n            case 'whisper_restricted_recipient':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseWhisper'], noticeAndMsgid);\n              break;\n            // Permission error..\n\n            case 'no_permission':\n            case 'msg_banned':\n            case 'msg_room_not_found':\n            case 'msg_channel_suspended':\n            case 'tos_ban':\n            case 'invalid_user':\n              this.log.info(basicLog);\n              this.emits(['notice', '_promiseBan', '_promiseClear', '_promiseUnban', '_promiseTimeout', '_promiseDeletemessage', '_promiseMods', '_promiseMod', '_promiseUnmod', '_promiseVips', '_promiseVip', '_promiseUnvip', '_promiseCommercial', '_promiseHost', '_promiseUnhost', '_promiseJoin', '_promisePart', '_promiseR9kbeta', '_promiseR9kbetaoff', '_promiseSlow', '_promiseSlowoff', '_promiseFollowers', '_promiseFollowersoff', '_promiseSubscribers', '_promiseSubscribersoff', '_promiseEmoteonly', '_promiseEmoteonlyoff', '_promiseWhisper'], [noticeArr, [msgid, channel]]);\n              break;\n            // Automod-related..\n\n            case 'msg_rejected':\n            case 'msg_rejected_mandatory':\n              this.log.info(basicLog);\n              this.emit('automod', channel, msgid, msg);\n              break;\n            // Unrecognized command..\n\n            case 'unrecognized_cmd':\n              this.log.info(basicLog);\n              this.emit('notice', channel, msgid, msg);\n              break;\n            // Send the following msg-ids to the notice event listener..\n\n            case 'cmds_available':\n            case 'host_target_went_offline':\n            case 'msg_censored_broadcaster':\n            case 'msg_duplicate':\n            case 'msg_emoteonly':\n            case 'msg_verified_email':\n            case 'msg_ratelimit':\n            case 'msg_subsonly':\n            case 'msg_timedout':\n            case 'msg_bad_characters':\n            case 'msg_channel_blocked':\n            case 'msg_facebook':\n            case 'msg_followersonly':\n            case 'msg_followersonly_followed':\n            case 'msg_followersonly_zero':\n            case 'msg_slowmode':\n            case 'msg_suspended':\n            case 'no_help':\n            case 'usage_disconnect':\n            case 'usage_help':\n            case 'usage_me':\n            case 'unavailable_command':\n              this.log.info(basicLog);\n              this.emit('notice', channel, msgid, msg);\n              break;\n            // Ignore this because we are already listening to HOSTTARGET..\n\n            case 'host_on':\n            case 'host_off':\n              break;\n\n            default:\n              if (msg.includes('Login unsuccessful') || msg.includes('Login authentication failed')) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = msg;\n                this.log.error(this.reason);\n                this.ws.close();\n              } else if (msg.includes('Error logging in') || msg.includes('Improperly formatted auth')) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = msg;\n                this.log.error(this.reason);\n                this.ws.close();\n              } else if (msg.includes('Invalid NICK')) {\n                this.wasCloseCalled = false;\n                this.reconnect = false;\n                this.reason = 'Invalid NICK.';\n                this.log.error(this.reason);\n                this.ws.close();\n              } else {\n                this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\n                this.emit('notice', channel, msgid, msg);\n              }\n\n              break;\n          }\n\n          break;\n        }\n      // Handle subanniversary / resub..\n\n      case 'USERNOTICE':\n        {\n          const username = tags['display-name'] || tags['login'];\n          const plan = tags['msg-param-sub-plan'] || '';\n          const planName = _.unescapeIRC(_.get(tags['msg-param-sub-plan-name'], '')) || null;\n          const prime = plan.includes('Prime');\n          const methods = {\n            prime,\n            plan,\n            planName\n          };\n          const streakMonths = ~~(tags['msg-param-streak-months'] || 0);\n          const recipient = tags['msg-param-recipient-display-name'] || tags['msg-param-recipient-user-name'];\n          const giftSubCount = ~~tags['msg-param-mass-gift-count'];\n          tags['message-type'] = msgid;\n\n          switch (msgid) {\n            // Handle resub\n            case 'resub':\n              this.emits(['resub', 'subanniversary'], [[channel, username, streakMonths, msg, tags, methods]]);\n              break;\n            // Handle sub\n\n            case 'sub':\n              this.emits(['subscription', 'sub'], [[channel, username, methods, msg, tags]]);\n              break;\n            // Handle gift sub\n\n            case 'subgift':\n              this.emit('subgift', channel, username, streakMonths, recipient, methods, tags);\n              break;\n            // Handle anonymous gift sub\n            // Need proof that this event occur\n\n            case 'anonsubgift':\n              this.emit('anonsubgift', channel, streakMonths, recipient, methods, tags);\n              break;\n            // Handle random gift subs\n\n            case 'submysterygift':\n              this.emit('submysterygift', channel, username, giftSubCount, methods, tags);\n              break;\n            // Handle anonymous random gift subs\n            // Need proof that this event occur\n\n            case 'anonsubmysterygift':\n              this.emit('anonsubmysterygift', channel, giftSubCount, methods, tags);\n              break;\n            // Handle user upgrading from Prime to a normal tier sub\n\n            case 'primepaidupgrade':\n              this.emit('primepaidupgrade', channel, username, methods, tags);\n              break;\n            // Handle user upgrading from a gifted sub\n\n            case 'giftpaidupgrade':\n              {\n                const sender = tags['msg-param-sender-name'] || tags['msg-param-sender-login'];\n                this.emit('giftpaidupgrade', channel, username, sender, tags);\n                break;\n              }\n            // Handle user upgrading from an anonymous gifted sub\n\n            case 'anongiftpaidupgrade':\n              this.emit('anongiftpaidupgrade', channel, username, tags);\n              break;\n            // Handle raid\n\n            case 'raid':\n              {\n                const username = tags['msg-param-displayName'] || tags['msg-param-login'];\n                const viewers = +tags['msg-param-viewerCount'];\n                this.emit('raided', channel, username, viewers, tags);\n                break;\n              }\n            // Handle ritual\n\n            case 'ritual':\n              {\n                const ritualName = tags['msg-param-ritual-name'];\n\n                switch (ritualName) {\n                  // Handle new chatter ritual\n                  case 'new_chatter':\n                    this.emit('newchatter', channel, username, tags, msg);\n                    break;\n                  // All unknown rituals should be passed through\n\n                  default:\n                    this.emit('ritual', ritualName, channel, username, tags, msg);\n                    break;\n                }\n\n                break;\n              }\n            // All other msgid events should be emitted under a usernotice event\n            // until it comes up and needs to be added..\n\n            default:\n              this.emit('usernotice', msgid, channel, tags, msg);\n              break;\n          }\n\n          break;\n        }\n      // Channel is now hosting another channel or exited host mode..\n\n      case 'HOSTTARGET':\n        {\n          const msgSplit = msg.split(' ');\n          const viewers = ~~msgSplit[1] || 0; // Stopped hosting..\n\n          if (msgSplit[0] === '-') {\n            this.log.info(`[${channel}] Exited host mode.`);\n            this.emits(['unhost', '_promiseUnhost'], [[channel, viewers], [null]]);\n          } // Now hosting..\n          else {\n            this.log.info(`[${channel}] Now hosting ${msgSplit[0]} for ${viewers} viewer(s).`);\n            this.emit('hosting', channel, msgSplit[0], viewers);\n          }\n\n          break;\n        }\n      // Someone has been timed out or chat has been cleared by a moderator..\n\n      case 'CLEARCHAT':\n        // User has been banned / timed out by a moderator..\n        if (message.params.length > 1) {\n          // Duration returns null if it's a ban, otherwise it's a timeout..\n          const duration = _.get(message.tags['ban-duration'], null);\n\n          if (duration === null) {\n            this.log.info(`[${channel}] ${msg} has been banned.`);\n            this.emit('ban', channel, msg, null, message.tags);\n          } else {\n            this.log.info(`[${channel}] ${msg} has been timed out for ${duration} seconds.`);\n            this.emit('timeout', channel, msg, null, ~~duration, message.tags);\n          }\n        } // Chat was cleared by a moderator..\n        else {\n          this.log.info(`[${channel}] Chat was cleared by a moderator.`);\n          this.emits(['clearchat', '_promiseClear'], [[channel], [null]]);\n        }\n\n        break;\n      // Someone's message has been deleted\n\n      case 'CLEARMSG':\n        if (message.params.length > 1) {\n          const deletedMessage = msg;\n          const username = tags['login'];\n          tags['message-type'] = 'messagedeleted';\n          this.log.info(`[${channel}] ${username}'s message has been deleted.`);\n          this.emit('messagedeleted', channel, username, deletedMessage, tags);\n        }\n\n        break;\n      // Received a reconnection request from the server..\n\n      case 'RECONNECT':\n        this.log.info('Received RECONNECT request from Twitch..');\n        this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\n        this.disconnect().catch(err => this.log.error(err));\n        setTimeout(() => this.connect().catch(err => this.log.error(err)), this.reconnectTimer);\n        break;\n      // Received when joining a channel and every time you send a PRIVMSG to a channel.\n\n      case 'USERSTATE':\n        message.tags.username = this.username; // Add the client to the moderators of this room..\n\n        if (message.tags['user-type'] === 'mod') {\n          if (!this.moderators[channel]) {\n            this.moderators[channel] = [];\n          }\n\n          if (!this.moderators[channel].includes(this.username)) {\n            this.moderators[channel].push(this.username);\n          }\n        } // Logged in and username doesn't start with justinfan..\n\n\n        if (!_.isJustinfan(this.getUsername()) && !this.userstate[channel]) {\n          this.userstate[channel] = tags;\n          this.lastJoined = channel;\n          this.channels.push(channel);\n          this.log.info(`Joined ${channel}`);\n          this.emit('join', channel, _.username(this.getUsername()), true);\n        } // Emote-sets has changed, update it..\n\n\n        if (message.tags['emote-sets'] !== this.emotes) {\n          this._updateEmoteset(message.tags['emote-sets']);\n        }\n\n        this.userstate[channel] = tags;\n        break;\n      // Describe non-channel-specific state informations..\n\n      case 'GLOBALUSERSTATE':\n        this.globaluserstate = tags;\n        this.emit('globaluserstate', tags); // Received emote-sets..\n\n        if (typeof message.tags['emote-sets'] !== 'undefined') {\n          this._updateEmoteset(message.tags['emote-sets']);\n        }\n\n        break;\n      // Received when joining a channel and every time one of the chat room settings, like slow mode, change.\n      // The message on join contains all room settings.\n\n      case 'ROOMSTATE':\n        // We use this notice to know if we successfully joined a channel..\n        if (_.channel(this.lastJoined) === channel) {\n          this.emit('_promiseJoin', null, channel);\n        } // Provide the channel name in the tags before emitting it..\n\n\n        message.tags.channel = channel;\n        this.emit('roomstate', channel, message.tags);\n\n        if (!_.hasOwn(message.tags, 'subs-only')) {\n          // Handle slow mode here instead of the slow_on/off notice..\n          // This room is now in slow mode. You may send messages every slow_duration seconds.\n          if (_.hasOwn(message.tags, 'slow')) {\n            if (typeof message.tags.slow === 'boolean' && !message.tags.slow) {\n              const disabled = [channel, false, 0];\n              this.log.info(`[${channel}] This room is no longer in slow mode.`);\n              this.emits(['slow', 'slowmode', '_promiseSlowoff'], [disabled, disabled, [null]]);\n            } else {\n              const seconds = ~~message.tags.slow;\n              const enabled = [channel, true, seconds];\n              this.log.info(`[${channel}] This room is now in slow mode.`);\n              this.emits(['slow', 'slowmode', '_promiseSlow'], [enabled, enabled, [null]]);\n            }\n          } // Handle followers only mode here instead of the followers_on/off notice..\n          // This room is now in follower-only mode.\n          // This room is now in <duration> followers-only mode.\n          // This room is no longer in followers-only mode.\n          // duration is in minutes (string)\n          // -1 when /followersoff (string)\n          // false when /followers with no duration (boolean)\n\n\n          if (_.hasOwn(message.tags, 'followers-only')) {\n            if (message.tags['followers-only'] === '-1') {\n              const disabled = [channel, false, 0];\n              this.log.info(`[${channel}] This room is no longer in followers-only mode.`);\n              this.emits(['followersonly', 'followersmode', '_promiseFollowersoff'], [disabled, disabled, [null]]);\n            } else {\n              const minutes = ~~message.tags['followers-only'];\n              const enabled = [channel, true, minutes];\n              this.log.info(`[${channel}] This room is now in follower-only mode.`);\n              this.emits(['followersonly', 'followersmode', '_promiseFollowers'], [enabled, enabled, [null]]);\n            }\n          }\n        }\n\n        break;\n      // Wrong cluster..\n\n      case 'SERVERCHANGE':\n        break;\n\n      default:\n        this.log.warn(`Could not parse message from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\n        break;\n    }\n  } // Messages from jtv..\n  else if (message.prefix === 'jtv') {\n    switch (message.command) {\n      case 'MODE':\n        if (msg === '+o') {\n          // Add username to the moderators..\n          if (!this.moderators[channel]) {\n            this.moderators[channel] = [];\n          }\n\n          if (!this.moderators[channel].includes(message.params[2])) {\n            this.moderators[channel].push(message.params[2]);\n          }\n\n          this.emit('mod', channel, message.params[2]);\n        } else if (msg === '-o') {\n          // Remove username from the moderators..\n          if (!this.moderators[channel]) {\n            this.moderators[channel] = [];\n          }\n\n          this.moderators[channel].filter(value => value !== message.params[2]);\n          this.emit('unmod', channel, message.params[2]);\n        }\n\n        break;\n\n      default:\n        this.log.warn(`Could not parse message from jtv:\\n${JSON.stringify(message, null, 4)}`);\n        break;\n    }\n  } // Anything else..\n  else {\n    switch (message.command) {\n      case '353':\n        this.emit('names', message.params[2], message.params[3].split(' '));\n        break;\n\n      case '366':\n        break;\n      // Someone has joined the channel..\n\n      case 'JOIN':\n        {\n          const nick = message.prefix.split('!')[0]; // Joined a channel as a justinfan (anonymous) user..\n\n          if (_.isJustinfan(this.getUsername()) && this.username === nick) {\n            this.lastJoined = channel;\n            this.channels.push(channel);\n            this.log.info(`Joined ${channel}`);\n            this.emit('join', channel, nick, true);\n          } // Someone else joined the channel, just emit the join event..\n\n\n          if (this.username !== nick) {\n            this.emit('join', channel, nick, false);\n          }\n\n          break;\n        }\n      // Someone has left the channel..\n\n      case 'PART':\n        {\n          let isSelf = false;\n          const nick = message.prefix.split('!')[0]; // Client left a channel..\n\n          if (this.username === nick) {\n            isSelf = true;\n\n            if (this.userstate[channel]) {\n              delete this.userstate[channel];\n            }\n\n            let index = this.channels.indexOf(channel);\n\n            if (index !== -1) {\n              this.channels.splice(index, 1);\n            }\n\n            index = this.opts.channels.indexOf(channel);\n\n            if (index !== -1) {\n              this.opts.channels.splice(index, 1);\n            }\n\n            this.log.info(`Left ${channel}`);\n            this.emit('_promisePart', null);\n          } // Client or someone else left the channel, emit the part event..\n\n\n          this.emit('part', channel, nick, isSelf);\n          break;\n        }\n      // Received a whisper..\n\n      case 'WHISPER':\n        {\n          const nick = message.prefix.split('!')[0];\n          this.log.info(`[WHISPER] <${nick}>: ${msg}`); // Update the tags to provide the username..\n\n          if (!_.hasOwn(message.tags, 'username')) {\n            message.tags.username = nick;\n          }\n\n          message.tags['message-type'] = 'whisper';\n\n          const from = _.channel(message.tags.username); // Emit for both, whisper and message..\n\n\n          this.emits(['whisper', 'message'], [[from, message.tags, msg, false]]);\n          break;\n        }\n\n      case 'PRIVMSG':\n        // Add username (lowercase) to the tags..\n        message.tags.username = message.prefix.split('!')[0]; // Message from JTV..\n\n        if (message.tags.username === 'jtv') {\n          const name = _.username(msg.split(' ')[0]);\n\n          const autohost = msg.includes('auto'); // Someone is hosting the channel and the message contains how many viewers..\n\n          if (msg.includes('hosting you for')) {\n            const count = _.extractNumber(msg);\n\n            this.emit('hosted', channel, name, count, autohost);\n          } // Some is hosting the channel, but no viewer(s) count provided in the message..\n          else if (msg.includes('hosting you')) {\n            this.emit('hosted', channel, name, 0, autohost);\n          }\n        } else {\n          const messagesLogLevel = _.get(this.opts.options.messagesLogLevel, 'info'); // Message is an action (/me <message>)..\n\n\n          const actionMessage = _.actionMessage(msg);\n\n          message.tags['message-type'] = actionMessage ? 'action' : 'chat';\n          msg = actionMessage ? actionMessage[1] : msg; // Check for Bits prior to actions message\n\n          if (_.hasOwn(message.tags, 'bits')) {\n            this.emit('cheer', channel, message.tags, msg);\n          } else {\n            //Handle Channel Point Redemptions (Require's Text Input)\n            if (_.hasOwn(message.tags, 'msg-id')) {\n              if (message.tags['msg-id'] === 'highlighted-message') {\n                const rewardtype = message.tags['msg-id'];\n                this.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\n              } else if (message.tags['msg-id'] === 'skip-subs-mode-message') {\n                const rewardtype = message.tags['msg-id'];\n                this.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\n              }\n            } else if (_.hasOwn(message.tags, 'custom-reward-id')) {\n              const rewardtype = message.tags['custom-reward-id'];\n              this.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\n            }\n\n            if (actionMessage) {\n              this.log[messagesLogLevel](`[${channel}] *<${message.tags.username}>: ${msg}`);\n              this.emits(['action', 'message'], [[channel, message.tags, msg, false]]);\n            } // Message is a regular chat message..\n            else {\n              this.log[messagesLogLevel](`[${channel}] <${message.tags.username}>: ${msg}`);\n              this.emits(['chat', 'message'], [[channel, message.tags, msg, false]]);\n            }\n          }\n        }\n\n        break;\n\n      default:\n        this.log.warn(`Could not parse message:\\n${JSON.stringify(message, null, 4)}`);\n        break;\n    }\n  }\n}; // Connect to server..\n\n\nclient.prototype.connect = function connect() {\n  return new Promise((resolve, reject) => {\n    this.server = _.get(this.opts.connection.server, 'irc-ws.chat.twitch.tv');\n    this.port = _.get(this.opts.connection.port, 80); // Override port if using a secure connection..\n\n    if (this.secure) {\n      this.port = 443;\n    }\n\n    if (this.port === 443) {\n      this.secure = true;\n    }\n\n    this.reconnectTimer = this.reconnectTimer * this.reconnectDecay;\n\n    if (this.reconnectTimer >= this.maxReconnectInterval) {\n      this.reconnectTimer = this.maxReconnectInterval;\n    } // Connect to server from configuration..\n\n\n    this._openConnection();\n\n    this.once('_promiseConnect', err => {\n      if (!err) {\n        resolve([this.server, ~~this.port]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}; // Open a connection..\n\n\nclient.prototype._openConnection = function _openConnection() {\n  const url = `${this.secure ? 'wss' : 'ws'}://${this.server}:${this.port}/`;\n  /** @type {import('ws').ClientOptions} */\n\n  const connectionOptions = {};\n\n  if ('agent' in this.opts.connection) {\n    connectionOptions.agent = this.opts.connection.agent;\n  }\n\n  this.ws = new _WebSocket(url, 'irc', connectionOptions);\n  this.ws.onmessage = this._onMessage.bind(this);\n  this.ws.onerror = this._onError.bind(this);\n  this.ws.onclose = this._onClose.bind(this);\n  this.ws.onopen = this._onOpen.bind(this);\n}; // Called when the WebSocket connection's readyState changes to OPEN.\n// Indicates that the connection is ready to send and receive data..\n\n\nclient.prototype._onOpen = function _onOpen() {\n  if (!this._isConnected()) {\n    return;\n  } // Emitting \"connecting\" event..\n\n\n  this.log.info(`Connecting to ${this.server} on port ${this.port}..`);\n  this.emit('connecting', this.server, ~~this.port);\n  this.username = _.get(this.opts.identity.username, _.justinfan());\n\n  this._getToken().then(token => {\n    const password = _.password(token); // Emitting \"logon\" event..\n\n\n    this.log.info('Sending authentication to server..');\n    this.emit('logon');\n    let caps = 'twitch.tv/tags twitch.tv/commands';\n\n    if (!this._skipMembership) {\n      caps += ' twitch.tv/membership';\n    }\n\n    this.ws.send('CAP REQ :' + caps); // Authentication..\n\n    if (password) {\n      this.ws.send(`PASS ${password}`);\n    } else if (_.isJustinfan(this.username)) {\n      this.ws.send('PASS SCHMOOPIIE');\n    }\n\n    this.ws.send(`NICK ${this.username}`);\n  }).catch(err => {\n    this.emits(['_promiseConnect', 'disconnected'], [[err], ['Could not get a token.']]);\n  });\n}; // Fetches a token from the option.\n\n\nclient.prototype._getToken = function _getToken() {\n  const passwordOption = this.opts.identity.password;\n  let password;\n\n  if (typeof passwordOption === 'function') {\n    password = passwordOption();\n\n    if (password instanceof Promise) {\n      return password;\n    }\n\n    return Promise.resolve(password);\n  }\n\n  return Promise.resolve(passwordOption);\n}; // Called when a message is received from the server..\n\n\nclient.prototype._onMessage = function _onMessage(event) {\n  const parts = event.data.trim().split('\\r\\n');\n  parts.forEach(str => {\n    const msg = parse.msg(str);\n\n    if (msg) {\n      this.handleMessage(msg);\n    }\n  });\n}; // Called when an error occurs..\n\n\nclient.prototype._onError = function _onError() {\n  this.moderators = {};\n  this.userstate = {};\n  this.globaluserstate = {}; // Stop the internal ping timeout check interval..\n\n  clearInterval(this.pingLoop);\n  clearTimeout(this.pingTimeout);\n  clearTimeout(this._updateEmotesetsTimer);\n  this.reason = this.ws === null ? 'Connection closed.' : 'Unable to connect.';\n  this.emits(['_promiseConnect', 'disconnected'], [[this.reason]]); // Reconnect to server..\n\n  if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\n    this.emit('maxreconnect');\n    this.log.error('Maximum reconnection attempts reached.');\n  }\n\n  if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {\n    this.reconnecting = true;\n    this.reconnections = this.reconnections + 1;\n    this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\n    this.emit('reconnect');\n    setTimeout(() => {\n      this.reconnecting = false;\n      this.connect().catch(err => this.log.error(err));\n    }, this.reconnectTimer);\n  }\n\n  this.ws = null;\n}; // Called when the WebSocket connection's readyState changes to CLOSED..\n\n\nclient.prototype._onClose = function _onClose() {\n  this.moderators = {};\n  this.userstate = {};\n  this.globaluserstate = {}; // Stop the internal ping timeout check interval..\n\n  clearInterval(this.pingLoop);\n  clearTimeout(this.pingTimeout);\n  clearTimeout(this._updateEmotesetsTimer); // User called .disconnect(), don't try to reconnect.\n\n  if (this.wasCloseCalled) {\n    this.wasCloseCalled = false;\n    this.reason = 'Connection closed.';\n    this.log.info(this.reason);\n    this.emits(['_promiseConnect', '_promiseDisconnect', 'disconnected'], [[this.reason], [null], [this.reason]]);\n  } // Got disconnected from server..\n  else {\n    this.emits(['_promiseConnect', 'disconnected'], [[this.reason]]); // Reconnect to server..\n\n    if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\n      this.emit('maxreconnect');\n      this.log.error('Maximum reconnection attempts reached.');\n    }\n\n    if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {\n      this.reconnecting = true;\n      this.reconnections = this.reconnections + 1;\n      this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\n      this.emit('reconnect');\n      setTimeout(() => {\n        this.reconnecting = false;\n        this.connect().catch(err => this.log.error(err));\n      }, this.reconnectTimer);\n    }\n  }\n\n  this.ws = null;\n}; // Minimum of 600ms for command promises, if current latency exceeds, add 100ms to it to make sure it doesn't get timed out..\n\n\nclient.prototype._getPromiseDelay = function _getPromiseDelay() {\n  if (this.currentLatency <= 600) {\n    return 600;\n  } else {\n    return this.currentLatency + 100;\n  }\n}; // Send command to server or channel..\n\n\nclient.prototype._sendCommand = function _sendCommand(delay, channel, command, fn) {\n  // Race promise against delay..\n  return new Promise((resolve, reject) => {\n    // Make sure the socket is opened..\n    if (!this._isConnected()) {\n      // Disconnected from server..\n      return reject('Not connected to server.');\n    } else if (delay === null || typeof delay === 'number') {\n      if (delay === null) {\n        delay = this._getPromiseDelay();\n      }\n\n      _.promiseDelay(delay).then(() => reject('No response from Twitch.'));\n    } // Executing a command on a channel..\n\n\n    if (channel !== null) {\n      const chan = _.channel(channel);\n\n      this.log.info(`[${chan}] Executing command: ${command}`);\n      this.ws.send(`PRIVMSG ${chan} :${command}`);\n    } // Executing a raw command..\n    else {\n      this.log.info(`Executing command: ${command}`);\n      this.ws.send(command);\n    }\n\n    if (typeof fn === 'function') {\n      fn(resolve, reject);\n    } else {\n      resolve();\n    }\n  });\n}; // Send a message to channel..\n\n\nclient.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {\n  // Promise a result..\n  return new Promise((resolve, reject) => {\n    // Make sure the socket is opened and not logged in as a justinfan user..\n    if (!this._isConnected()) {\n      return reject('Not connected to server.');\n    } else if (_.isJustinfan(this.getUsername())) {\n      return reject('Cannot send anonymous messages.');\n    }\n\n    const chan = _.channel(channel);\n\n    if (!this.userstate[chan]) {\n      this.userstate[chan] = {};\n    } // Split long lines otherwise they will be eaten by the server..\n\n\n    if (message.length >= 500) {\n      const msg = _.splitLine(message, 500);\n\n      message = msg[0];\n      setTimeout(() => {\n        this._sendMessage(delay, channel, msg[1], () => {});\n      }, 350);\n    }\n\n    this.ws.send(`PRIVMSG ${chan} :${message}`);\n    const emotes = {}; // Parse regex and string emotes..\n\n    Object.keys(this.emotesets).forEach(id => this.emotesets[id].forEach(emote => {\n      const emoteFunc = _.isRegex(emote.code) ? parse.emoteRegex : parse.emoteString;\n      return emoteFunc(message, emote.code, emote.id, emotes);\n    })); // Merge userstate with parsed emotes..\n\n    const userstate = Object.assign(this.userstate[chan], parse.emotes({\n      emotes: parse.transformEmotes(emotes) || null\n    }));\n\n    const messagesLogLevel = _.get(this.opts.options.messagesLogLevel, 'info'); // Message is an action (/me <message>)..\n\n\n    const actionMessage = _.actionMessage(message);\n\n    if (actionMessage) {\n      userstate['message-type'] = 'action';\n      this.log[messagesLogLevel](`[${chan}] *<${this.getUsername()}>: ${actionMessage[1]}`);\n      this.emits(['action', 'message'], [[chan, userstate, actionMessage[1], true]]);\n    } // Message is a regular chat message..\n    else {\n      userstate['message-type'] = 'chat';\n      this.log[messagesLogLevel](`[${chan}] <${this.getUsername()}>: ${message}`);\n      this.emits(['chat', 'message'], [[chan, userstate, message, true]]);\n    }\n\n    if (typeof fn === 'function') {\n      fn(resolve, reject);\n    } else {\n      resolve();\n    }\n  });\n}; // Grab the emote-sets object from the API..\n\n\nclient.prototype._updateEmoteset = function _updateEmoteset(sets) {\n  let setsChanges = sets !== undefined;\n\n  if (setsChanges) {\n    if (sets === this.emotes) {\n      setsChanges = false;\n    } else {\n      this.emotes = sets;\n    }\n  }\n\n  if (this._skipUpdatingEmotesets) {\n    if (setsChanges) {\n      this.emit('emotesets', sets, {});\n    }\n\n    return;\n  }\n\n  const setEmotesetTimer = () => {\n    if (this._updateEmotesetsTimerDelay > 0) {\n      clearTimeout(this._updateEmotesetsTimer);\n      this._updateEmotesetsTimer = setTimeout(() => this._updateEmoteset(sets), this._updateEmotesetsTimerDelay);\n    }\n  };\n\n  this._getToken().then(token => {\n    const url = `https://api.twitch.tv/kraken/chat/emoticon_images?emotesets=${sets}`;\n    /** @type {import('node-fetch').RequestInit} */\n\n    const fetchOptions = {};\n\n    if ('fetchAgent' in this.opts.connection) {\n      fetchOptions.agent = this.opts.connection.fetchAgent;\n    }\n    /** @type {import('node-fetch').Response} */\n\n\n    return _fetch(url, { ...fetchOptions,\n      headers: {\n        'Accept': 'application/vnd.twitchtv.v5+json',\n        'Authorization': `OAuth ${_.token(token)}`,\n        'Client-ID': this.clientId\n      }\n    });\n  }).then(res => res.json()).then(data => {\n    this.emotesets = data.emoticon_sets || {};\n    this.emit('emotesets', sets, this.emotesets);\n    setEmotesetTimer();\n  }).catch(() => setEmotesetTimer());\n}; // Get current username..\n\n\nclient.prototype.getUsername = function getUsername() {\n  return this.username;\n}; // Get current options..\n\n\nclient.prototype.getOptions = function getOptions() {\n  return this.opts;\n}; // Get current channels..\n\n\nclient.prototype.getChannels = function getChannels() {\n  return this.channels;\n}; // Check if username is a moderator on a channel..\n\n\nclient.prototype.isMod = function isMod(channel, username) {\n  const chan = _.channel(channel);\n\n  if (!this.moderators[chan]) {\n    this.moderators[chan] = [];\n  }\n\n  return this.moderators[chan].includes(_.username(username));\n}; // Get readyState..\n\n\nclient.prototype.readyState = function readyState() {\n  if (this.ws === null) {\n    return 'CLOSED';\n  }\n\n  return ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][this.ws.readyState];\n}; // Determine if the client has a WebSocket and it's open..\n\n\nclient.prototype._isConnected = function _isConnected() {\n  return this.ws !== null && this.ws.readyState === 1;\n}; // Disconnect from server..\n\n\nclient.prototype.disconnect = function disconnect() {\n  return new Promise((resolve, reject) => {\n    if (this.ws !== null && this.ws.readyState !== 3) {\n      this.wasCloseCalled = true;\n      this.log.info('Disconnecting from server..');\n      this.ws.close();\n      this.once('_promiseDisconnect', () => resolve([this.server, ~~this.port]));\n    } else {\n      this.log.error('Cannot disconnect from server. Socket is not opened or connection is already closing.');\n      reject('Cannot disconnect from server. Socket is not opened or connection is already closing.');\n    }\n  });\n};\n\nclient.prototype.off = client.prototype.removeListener; // Expose everything, for browser and Node..\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = client;\n}\n\nif (typeof window !== 'undefined') {\n  window.tmi = {\n    client,\n    Client: client\n  };\n}","map":{"version":3,"sources":["D:/Programming Projects/twitch-chat-combiner-js/node_modules/tmi.js/lib/client.js"],"names":["_global","global","window","_WebSocket","WebSocket","require","_fetch","fetch","api","commands","EventEmitter","logger","parse","Queue","_","_apiWarned","client","opts","get","channels","connection","identity","options","clientId","_globalDefaultChannel","channel","globalDefaultChannel","_skipMembership","skipMembership","_skipUpdatingEmotesets","skipUpdatingEmotesets","_updateEmotesetsTimer","_updateEmotesetsTimerDelay","updateEmotesetsTimer","maxReconnectAttempts","Infinity","maxReconnectInterval","reconnect","reconnectDecay","reconnectInterval","reconnecting","reconnections","reconnectTimer","secure","server","port","emotes","emotesets","currentLatency","globaluserstate","lastJoined","latency","Date","moderators","pingLoop","pingTimeout","reason","username","userstate","wasCloseCalled","ws","level","debug","log","setLevel","err","forEach","part","index","theArray","call","setMaxListeners","inherits","methodName","prototype","emits","types","values","i","length","val","emit","apply","concat","warn","handleMessage","message","listenerCount","JSON","stringify","params","msg","msgid","tags","badges","badgeInfo","key","value","unescapeIRC","prefix","command","_isConnected","send","currDate","getTime","clearTimeout","info","setInterval","setTimeout","error","close","clearInterval","timeout","joinInterval","joinQueue","joinChannels","Set","add","join","catch","next","nullArr","noticeArr","msgidArr","channelTrueArr","channelFalseArr","noticeAndNull","noticeAndMsgid","basicLog","listSplit","split","mods","toLowerCase","filter","n","endsWith","slice","vips","remainingHost","isNaN","parseInt","includes","plan","planName","prime","methods","streakMonths","recipient","giftSubCount","sender","viewers","ritualName","msgSplit","duration","deletedMessage","Math","round","disconnect","connect","push","isJustinfan","getUsername","_updateEmoteset","hasOwn","slow","disabled","seconds","enabled","minutes","nick","isSelf","indexOf","splice","from","name","autohost","count","extractNumber","messagesLogLevel","actionMessage","rewardtype","Promise","resolve","reject","_openConnection","once","url","connectionOptions","agent","onmessage","_onMessage","bind","onerror","_onError","onclose","_onClose","onopen","_onOpen","justinfan","_getToken","then","token","password","caps","passwordOption","event","parts","data","trim","str","_getPromiseDelay","_sendCommand","delay","fn","promiseDelay","chan","_sendMessage","splitLine","Object","keys","id","emote","emoteFunc","isRegex","code","emoteRegex","emoteString","assign","transformEmotes","sets","setsChanges","undefined","setEmotesetTimer","fetchOptions","fetchAgent","headers","res","json","emoticon_sets","getOptions","getChannels","isMod","readyState","off","removeListener","module","exports","tmi","Client"],"mappings":"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","sourcesContent":["const _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\r\nconst _WebSocket = _global.WebSocket || require('ws');\r\nconst _fetch = _global.fetch || require('node-fetch');\r\nconst api = require('./api');\r\nconst commands = require('./commands');\r\nconst EventEmitter = require('./events').EventEmitter;\r\nconst logger = require('./logger');\r\nconst parse = require('./parser');\r\nconst Queue = require('./timer');\r\nconst _ = require('./utils');\r\n\r\nlet _apiWarned = false;\r\n\r\n// Client instance..\r\nconst client = function client(opts) {\r\n\tif(this instanceof client === false) { return new client(opts); }\r\n\tthis.opts = _.get(opts, {});\r\n\tthis.opts.channels = this.opts.channels || [];\r\n\tthis.opts.connection = this.opts.connection || {};\r\n\tthis.opts.identity = this.opts.identity || {};\r\n\tthis.opts.options = this.opts.options || {};\r\n\r\n\tthis.clientId = _.get(this.opts.options.clientId, null);\r\n\tthis._globalDefaultChannel = _.channel(_.get(this.opts.options.globalDefaultChannel, '#tmijs'));\r\n\tthis._skipMembership = _.get(this.opts.options.skipMembership, false);\r\n\tthis._skipUpdatingEmotesets = _.get(this.opts.options.skipUpdatingEmotesets, false);\r\n\tthis._updateEmotesetsTimer = null;\r\n\tthis._updateEmotesetsTimerDelay = _.get(this.opts.options.updateEmotesetsTimer, 60000);\r\n\r\n\tthis.maxReconnectAttempts = _.get(this.opts.connection.maxReconnectAttempts, Infinity);\r\n\tthis.maxReconnectInterval = _.get(this.opts.connection.maxReconnectInterval, 30000);\r\n\tthis.reconnect = _.get(this.opts.connection.reconnect, true);\r\n\tthis.reconnectDecay = _.get(this.opts.connection.reconnectDecay, 1.5);\r\n\tthis.reconnectInterval = _.get(this.opts.connection.reconnectInterval, 1000);\r\n\r\n\tthis.reconnecting = false;\r\n\tthis.reconnections = 0;\r\n\tthis.reconnectTimer = this.reconnectInterval;\r\n\r\n\tthis.secure = _.get(\r\n\t\tthis.opts.connection.secure,\r\n\t\t!this.opts.connection.server && !this.opts.connection.port\r\n\t);\r\n\r\n\t// Raw data and object for emote-sets..\r\n\tthis.emotes = '';\r\n\tthis.emotesets = {};\r\n\r\n\tthis.channels = [];\r\n\tthis.currentLatency = 0;\r\n\tthis.globaluserstate = {};\r\n\tthis.lastJoined = '';\r\n\tthis.latency = new Date();\r\n\tthis.moderators = {};\r\n\tthis.pingLoop = null;\r\n\tthis.pingTimeout = null;\r\n\tthis.reason = '';\r\n\tthis.username = '';\r\n\tthis.userstate = {};\r\n\tthis.wasCloseCalled = false;\r\n\tthis.ws = null;\r\n\r\n\t// Create the logger..\r\n\tlet level = 'error';\r\n\tif(this.opts.options.debug) { level = 'info'; }\r\n\tthis.log = this.opts.logger || logger;\r\n\r\n\ttry { logger.setLevel(level); } catch(err) {}\r\n\r\n\t// Format the channel names..\r\n\tthis.opts.channels.forEach((part, index, theArray) =>\r\n\t\ttheArray[index] = _.channel(part)\r\n\t);\r\n\r\n\tEventEmitter.call(this);\r\n\tthis.setMaxListeners(0);\r\n};\r\n\r\n_.inherits(client, EventEmitter);\r\n\r\n// Put all commands in prototype..\r\nfor(const methodName in commands) {\r\n\tclient.prototype[methodName] = commands[methodName];\r\n}\r\n\r\n// Emit multiple events..\r\nclient.prototype.emits = function emits(types, values) {\r\n\tfor(let i = 0; i < types.length; i++) {\r\n\t\tconst val = i < values.length ? values[i] : values[values.length - 1];\r\n\t\tthis.emit.apply(this, [ types[i] ].concat(val));\r\n\t}\r\n};\r\n/** @deprecated */\r\nclient.prototype.api = function(...args) {\r\n\tif(!_apiWarned) {\r\n\t\tthis.log.warn('Client.prototype.api is deprecated and will be removed for version 2.0.0');\r\n\t\t_apiWarned = true;\r\n\t}\r\n\tapi(...args);\r\n};\r\n// Handle parsed chat server message..\r\nclient.prototype.handleMessage = function handleMessage(message) {\r\n\tif(!message) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif(this.listenerCount('raw_message')) {\r\n\t\tthis.emit('raw_message', JSON.parse(JSON.stringify(message)), message);\r\n\t}\r\n\r\n\tconst channel = _.channel(_.get(message.params[0], null));\r\n\tlet msg = _.get(message.params[1], null);\r\n\tconst msgid = _.get(message.tags['msg-id'], null);\r\n\r\n\t// Parse badges, badge-info and emotes..\r\n\tconst tags = message.tags = parse.badges(parse.badgeInfo(parse.emotes(message.tags)));\r\n\r\n\t// Transform IRCv3 tags..\r\n\tfor(const key in tags) {\r\n\t\tif(key === 'emote-sets' || key === 'ban-duration' || key === 'bits') {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tlet value = tags[key];\r\n\t\tif(typeof value === 'boolean') { value = null; }\r\n\t\telse if(value === '1') { value = true; }\r\n\t\telse if(value === '0') { value = false; }\r\n\t\telse if(typeof value === 'string') { value = _.unescapeIRC(value); }\r\n\t\ttags[key] = value;\r\n\t}\r\n\r\n\t// Messages with no prefix..\r\n\tif(message.prefix === null) {\r\n\t\tswitch(message.command) {\r\n\t\t\t// Received PING from server..\r\n\t\t\tcase 'PING':\r\n\t\t\t\tthis.emit('ping');\r\n\t\t\t\tif(this._isConnected()) {\r\n\t\t\t\t\tthis.ws.send('PONG');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Received PONG from server, return current latency..\r\n\t\t\tcase 'PONG': {\r\n\t\t\t\tconst currDate = new Date();\r\n\t\t\t\tthis.currentLatency = (currDate.getTime() - this.latency.getTime()) / 1000;\r\n\t\t\t\tthis.emits([ 'pong', '_promisePing' ], [ [ this.currentLatency ] ]);\r\n\r\n\t\t\t\tclearTimeout(this.pingTimeout);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.log.warn(`Could not parse message with no prefix:\\n${JSON.stringify(message, null, 4)}`);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Messages with \"tmi.twitch.tv\" as a prefix..\r\n\telse if(message.prefix === 'tmi.twitch.tv') {\r\n\t\tswitch(message.command) {\r\n\t\t\tcase '002':\r\n\t\t\tcase '003':\r\n\t\t\tcase '004':\r\n\t\t\tcase '372':\r\n\t\t\tcase '375':\r\n\t\t\tcase 'CAP':\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Retrieve username from server..\r\n\t\t\tcase '001':\r\n\t\t\t\tthis.username = message.params[0];\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Connected to server..\r\n\t\t\tcase '376': {\r\n\t\t\t\tthis.log.info('Connected to server.');\r\n\t\t\t\tthis.userstate[this._globalDefaultChannel] = {};\r\n\t\t\t\tthis.emits([ 'connected', '_promiseConnect' ], [ [ this.server, this.port ], [ null ] ]);\r\n\t\t\t\tthis.reconnections = 0;\r\n\t\t\t\tthis.reconnectTimer = this.reconnectInterval;\r\n\r\n\t\t\t\t// Set an internal ping timeout check interval..\r\n\t\t\t\tthis.pingLoop = setInterval(() => {\r\n\t\t\t\t\t// Make sure the connection is opened before sending the message..\r\n\t\t\t\t\tif(this._isConnected()) {\r\n\t\t\t\t\t\tthis.ws.send('PING');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.latency = new Date();\r\n\t\t\t\t\tthis.pingTimeout = setTimeout(() => {\r\n\t\t\t\t\t\tif(this.ws !== null) {\r\n\t\t\t\t\t\t\tthis.wasCloseCalled = false;\r\n\t\t\t\t\t\t\tthis.log.error('Ping timeout.');\r\n\t\t\t\t\t\t\tthis.ws.close();\r\n\r\n\t\t\t\t\t\t\tclearInterval(this.pingLoop);\r\n\t\t\t\t\t\t\tclearTimeout(this.pingTimeout);\r\n\t\t\t\t\t\t\tclearTimeout(this._updateEmotesetsTimer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, _.get(this.opts.connection.timeout, 9999));\r\n\t\t\t\t}, 60000);\r\n\r\n\t\t\t\t// Join all the channels from the config with an interval..\r\n\t\t\t\tlet joinInterval = _.get(this.opts.options.joinInterval, 2000);\r\n\t\t\t\tif(joinInterval < 300) {\r\n\t\t\t\t\tjoinInterval = 300;\r\n\t\t\t\t}\r\n\t\t\t\tconst joinQueue = new Queue(joinInterval);\r\n\t\t\t\tconst joinChannels = [ ...new Set([ ...this.opts.channels, ...this.channels ]) ];\r\n\t\t\t\tthis.channels = [];\r\n\r\n\t\t\t\tfor(let i = 0; i < joinChannels.length; i++) {\r\n\t\t\t\t\tconst channel = joinChannels[i];\r\n\t\t\t\t\tjoinQueue.add(() => {\r\n\t\t\t\t\t\tif(this._isConnected()) {\r\n\t\t\t\t\t\t\tthis.join(channel).catch(err => this.log.error(err));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tjoinQueue.next();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice\r\n\t\t\tcase 'NOTICE': {\r\n\t\t\t\tconst nullArr = [ null ];\r\n\t\t\t\tconst noticeArr = [ channel, msgid, msg ];\r\n\t\t\t\tconst msgidArr = [ msgid ];\r\n\t\t\t\tconst channelTrueArr = [ channel, true ];\r\n\t\t\t\tconst channelFalseArr = [ channel, false ];\r\n\t\t\t\tconst noticeAndNull = [ noticeArr, nullArr ];\r\n\t\t\t\tconst noticeAndMsgid = [ noticeArr, msgidArr ];\r\n\t\t\t\tconst basicLog = `[${channel}] ${msg}`;\r\n\t\t\t\tswitch(msgid) {\r\n\t\t\t\t\t// This room is now in subscribers-only mode.\r\n\t\t\t\t\tcase 'subs_on':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is now in subscribers-only mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'subscriber', 'subscribers', '_promiseSubscribers' ], [ channelTrueArr, channelTrueArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// This room is no longer in subscribers-only mode.\r\n\t\t\t\t\tcase 'subs_off':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is no longer in subscribers-only mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'subscriber', 'subscribers', '_promiseSubscribersoff' ], [ channelFalseArr, channelFalseArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// This room is now in emote-only mode.\r\n\t\t\t\t\tcase 'emote_only_on':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is now in emote-only mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'emoteonly', '_promiseEmoteonly' ], [ channelTrueArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// This room is no longer in emote-only mode.\r\n\t\t\t\t\tcase 'emote_only_off':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is no longer in emote-only mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'emoteonly', '_promiseEmoteonlyoff' ], [ channelFalseArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Do not handle slow_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\r\n\t\t\t\t\tcase 'slow_on':\r\n\t\t\t\t\tcase 'slow_off':\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Do not handle followers_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\r\n\t\t\t\t\tcase 'followers_on_zero':\r\n\t\t\t\t\tcase 'followers_on':\r\n\t\t\t\t\tcase 'followers_off':\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// This room is now in r9k mode.\r\n\t\t\t\t\tcase 'r9k_on':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is now in r9k mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'r9kmode', 'r9kbeta', '_promiseR9kbeta' ], [ channelTrueArr, channelTrueArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// This room is no longer in r9k mode.\r\n\t\t\t\t\tcase 'r9k_off':\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] This room is no longer in r9k mode.`);\r\n\t\t\t\t\t\tthis.emits([ 'r9kmode', 'r9kbeta', '_promiseR9kbetaoff' ], [ channelFalseArr, channelFalseArr, nullArr ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// The moderators of this room are: [..., ...]\r\n\t\t\t\t\tcase 'room_mods': {\r\n\t\t\t\t\t\tconst listSplit = msg.split(': ');\r\n\t\t\t\t\t\tconst mods = (listSplit.length > 1 ? listSplit[1] : '').toLowerCase()\r\n\t\t\t\t\t\t.split(', ')\r\n\t\t\t\t\t\t.filter(n => n);\r\n\r\n\t\t\t\t\t\tthis.emits([ '_promiseMods', 'mods' ], [ [ null, mods ], [ channel, mods ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// There are no moderators for this room.\r\n\t\t\t\t\tcase 'no_mods':\r\n\t\t\t\t\t\tthis.emits([ '_promiseMods', 'mods' ], [ [ null, [] ], [ channel, [] ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// The VIPs of this channel are: [..., ...]\r\n\t\t\t\t\tcase 'vips_success': {\r\n\t\t\t\t\t\tif(msg.endsWith('.')) {\r\n\t\t\t\t\t\t\tmsg = msg.slice(0, -1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst listSplit = msg.split(': ');\r\n\t\t\t\t\t\tconst vips = (listSplit.length > 1 ? listSplit[1] : '').toLowerCase()\r\n\t\t\t\t\t\t.split(', ')\r\n\t\t\t\t\t\t.filter(n => n);\r\n\r\n\t\t\t\t\t\tthis.emits([ '_promiseVips', 'vips' ], [ [ null, vips ], [ channel, vips ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// There are no VIPs for this room.\r\n\t\t\t\t\tcase 'no_vips':\r\n\t\t\t\t\t\tthis.emits([ '_promiseVips', 'vips' ], [ [ null, [] ], [ channel, [] ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Ban command failed..\r\n\t\t\t\t\tcase 'already_banned':\r\n\t\t\t\t\tcase 'bad_ban_admin':\r\n\t\t\t\t\tcase 'bad_ban_anon':\r\n\t\t\t\t\tcase 'bad_ban_broadcaster':\r\n\t\t\t\t\tcase 'bad_ban_global_mod':\r\n\t\t\t\t\tcase 'bad_ban_mod':\r\n\t\t\t\t\tcase 'bad_ban_self':\r\n\t\t\t\t\tcase 'bad_ban_staff':\r\n\t\t\t\t\tcase 'usage_ban':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseBan' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Ban command success..\r\n\t\t\t\t\tcase 'ban_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseBan' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Clear command failed..\r\n\t\t\t\t\tcase 'usage_clear':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseClear' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Mods command failed..\r\n\t\t\t\t\tcase 'usage_mods':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseMods' ], [ noticeArr, [ msgid, [] ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Mod command success..\r\n\t\t\t\t\tcase 'mod_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseMod' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// VIPs command failed..\r\n\t\t\t\t\tcase 'usage_vips':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseVips' ], [ noticeArr, [ msgid, [] ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// VIP command failed..\r\n\t\t\t\t\tcase 'usage_vip':\r\n\t\t\t\t\tcase 'bad_vip_grantee_banned':\r\n\t\t\t\t\tcase 'bad_vip_grantee_already_vip':\r\n\t\t\t\t\tcase 'bad_vip_max_vips_reached':\r\n\t\t\t\t\tcase 'bad_vip_achievement_incomplete':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseVip' ], [ noticeArr, [ msgid, [] ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// VIP command success..\r\n\t\t\t\t\tcase 'vip_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseVip' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Mod command failed..\r\n\t\t\t\t\tcase 'usage_mod':\r\n\t\t\t\t\tcase 'bad_mod_banned':\r\n\t\t\t\t\tcase 'bad_mod_mod':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseMod' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unmod command success..\r\n\t\t\t\t\tcase 'unmod_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnmod' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unvip command success...\r\n\t\t\t\t\tcase 'unvip_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnvip' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unmod command failed..\r\n\t\t\t\t\tcase 'usage_unmod':\r\n\t\t\t\t\tcase 'bad_unmod_mod':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnmod' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unvip command failed..\r\n\t\t\t\t\tcase 'usage_unvip':\r\n\t\t\t\t\tcase 'bad_unvip_grantee_not_vip':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnvip' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Color command success..\r\n\t\t\t\t\tcase 'color_changed':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseColor' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Color command failed..\r\n\t\t\t\t\tcase 'usage_color':\r\n\t\t\t\t\tcase 'turbo_only_color':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseColor' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Commercial command success..\r\n\t\t\t\t\tcase 'commercial_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseCommercial' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Commercial command failed..\r\n\t\t\t\t\tcase 'usage_commercial':\r\n\t\t\t\t\tcase 'bad_commercial_error':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseCommercial' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Host command success..\r\n\t\t\t\t\tcase 'hosts_remaining': {\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tconst remainingHost = (!isNaN(msg[0]) ? parseInt(msg[0]) : 0);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseHost' ], [ noticeArr, [ null, ~~remainingHost ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Host command failed..\r\n\t\t\t\t\tcase 'bad_host_hosting':\r\n\t\t\t\t\tcase 'bad_host_rate_exceeded':\r\n\t\t\t\t\tcase 'bad_host_error':\r\n\t\t\t\t\tcase 'usage_host':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseHost' ], [ noticeArr, [ msgid, null ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// r9kbeta command failed..\r\n\t\t\t\t\tcase 'already_r9k_on':\r\n\t\t\t\t\tcase 'usage_r9k_on':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseR9kbeta' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// r9kbetaoff command failed..\r\n\t\t\t\t\tcase 'already_r9k_off':\r\n\t\t\t\t\tcase 'usage_r9k_off':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseR9kbetaoff' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Timeout command success..\r\n\t\t\t\t\tcase 'timeout_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseTimeout' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'delete_message_success':\r\n\t\t\t\t\t\tthis.log.info(`[${channel} ${msg}]`);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseDeletemessage' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Subscribersoff command failed..\r\n\t\t\t\t\tcase 'already_subs_off':\r\n\t\t\t\t\tcase 'usage_subs_off':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseSubscribersoff' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Subscribers command failed..\r\n\t\t\t\t\tcase 'already_subs_on':\r\n\t\t\t\t\tcase 'usage_subs_on':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseSubscribers' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Emoteonlyoff command failed..\r\n\t\t\t\t\tcase 'already_emote_only_off':\r\n\t\t\t\t\tcase 'usage_emote_only_off':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseEmoteonlyoff' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Emoteonly command failed..\r\n\t\t\t\t\tcase 'already_emote_only_on':\r\n\t\t\t\t\tcase 'usage_emote_only_on':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseEmoteonly' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Slow command failed..\r\n\t\t\t\t\tcase 'usage_slow_on':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseSlow' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Slowoff command failed..\r\n\t\t\t\t\tcase 'usage_slow_off':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseSlowoff' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Timeout command failed..\r\n\t\t\t\t\tcase 'usage_timeout':\r\n\t\t\t\t\tcase 'bad_timeout_admin':\r\n\t\t\t\t\tcase 'bad_timeout_anon':\r\n\t\t\t\t\tcase 'bad_timeout_broadcaster':\r\n\t\t\t\t\tcase 'bad_timeout_duration':\r\n\t\t\t\t\tcase 'bad_timeout_global_mod':\r\n\t\t\t\t\tcase 'bad_timeout_mod':\r\n\t\t\t\t\tcase 'bad_timeout_self':\r\n\t\t\t\t\tcase 'bad_timeout_staff':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseTimeout' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unban command success..\r\n\t\t\t\t\t// Unban can also be used to cancel an active timeout.\r\n\t\t\t\t\tcase 'untimeout_success':\r\n\t\t\t\t\tcase 'unban_success':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnban' ], noticeAndNull);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unban command failed..\r\n\t\t\t\t\tcase 'usage_unban':\r\n\t\t\t\t\tcase 'bad_unban_no_ban':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnban' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Delete command failed..\r\n\t\t\t\t\tcase 'usage_delete':\r\n\t\t\t\t\tcase 'bad_delete_message_error':\r\n\t\t\t\t\tcase 'bad_delete_message_broadcaster':\r\n\t\t\t\t\tcase 'bad_delete_message_mod':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseDeletemessage' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unhost command failed..\r\n\t\t\t\t\tcase 'usage_unhost':\r\n\t\t\t\t\tcase 'not_hosting':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseUnhost' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Whisper command failed..\r\n\t\t\t\t\tcase 'whisper_invalid_login':\r\n\t\t\t\t\tcase 'whisper_invalid_self':\r\n\t\t\t\t\tcase 'whisper_limit_per_min':\r\n\t\t\t\t\tcase 'whisper_limit_per_sec':\r\n\t\t\t\t\tcase 'whisper_restricted':\r\n\t\t\t\t\tcase 'whisper_restricted_recipient':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([ 'notice', '_promiseWhisper' ], noticeAndMsgid);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Permission error..\r\n\t\t\t\t\tcase 'no_permission':\r\n\t\t\t\t\tcase 'msg_banned':\r\n\t\t\t\t\tcase 'msg_room_not_found':\r\n\t\t\t\t\tcase 'msg_channel_suspended':\r\n\t\t\t\t\tcase 'tos_ban':\r\n\t\t\t\t\tcase 'invalid_user':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emits([\r\n\t\t\t\t\t\t\t'notice',\r\n\t\t\t\t\t\t\t'_promiseBan',\r\n\t\t\t\t\t\t\t'_promiseClear',\r\n\t\t\t\t\t\t\t'_promiseUnban',\r\n\t\t\t\t\t\t\t'_promiseTimeout',\r\n\t\t\t\t\t\t\t'_promiseDeletemessage',\r\n\t\t\t\t\t\t\t'_promiseMods',\r\n\t\t\t\t\t\t\t'_promiseMod',\r\n\t\t\t\t\t\t\t'_promiseUnmod',\r\n\t\t\t\t\t\t\t'_promiseVips',\r\n\t\t\t\t\t\t\t'_promiseVip',\r\n\t\t\t\t\t\t\t'_promiseUnvip',\r\n\t\t\t\t\t\t\t'_promiseCommercial',\r\n\t\t\t\t\t\t\t'_promiseHost',\r\n\t\t\t\t\t\t\t'_promiseUnhost',\r\n\t\t\t\t\t\t\t'_promiseJoin',\r\n\t\t\t\t\t\t\t'_promisePart',\r\n\t\t\t\t\t\t\t'_promiseR9kbeta',\r\n\t\t\t\t\t\t\t'_promiseR9kbetaoff',\r\n\t\t\t\t\t\t\t'_promiseSlow',\r\n\t\t\t\t\t\t\t'_promiseSlowoff',\r\n\t\t\t\t\t\t\t'_promiseFollowers',\r\n\t\t\t\t\t\t\t'_promiseFollowersoff',\r\n\t\t\t\t\t\t\t'_promiseSubscribers',\r\n\t\t\t\t\t\t\t'_promiseSubscribersoff',\r\n\t\t\t\t\t\t\t'_promiseEmoteonly',\r\n\t\t\t\t\t\t\t'_promiseEmoteonlyoff',\r\n\t\t\t\t\t\t\t'_promiseWhisper'\r\n\t\t\t\t\t\t], [ noticeArr, [ msgid, channel ] ]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Automod-related..\r\n\t\t\t\t\tcase 'msg_rejected':\r\n\t\t\t\t\tcase 'msg_rejected_mandatory':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emit('automod', channel, msgid, msg);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Unrecognized command..\r\n\t\t\t\t\tcase 'unrecognized_cmd':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emit('notice', channel, msgid, msg);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Send the following msg-ids to the notice event listener..\r\n\t\t\t\t\tcase 'cmds_available':\r\n\t\t\t\t\tcase 'host_target_went_offline':\r\n\t\t\t\t\tcase 'msg_censored_broadcaster':\r\n\t\t\t\t\tcase 'msg_duplicate':\r\n\t\t\t\t\tcase 'msg_emoteonly':\r\n\t\t\t\t\tcase 'msg_verified_email':\r\n\t\t\t\t\tcase 'msg_ratelimit':\r\n\t\t\t\t\tcase 'msg_subsonly':\r\n\t\t\t\t\tcase 'msg_timedout':\r\n\t\t\t\t\tcase 'msg_bad_characters':\r\n\t\t\t\t\tcase 'msg_channel_blocked':\r\n\t\t\t\t\tcase 'msg_facebook':\r\n\t\t\t\t\tcase 'msg_followersonly':\r\n\t\t\t\t\tcase 'msg_followersonly_followed':\r\n\t\t\t\t\tcase 'msg_followersonly_zero':\r\n\t\t\t\t\tcase 'msg_slowmode':\r\n\t\t\t\t\tcase 'msg_suspended':\r\n\t\t\t\t\tcase 'no_help':\r\n\t\t\t\t\tcase 'usage_disconnect':\r\n\t\t\t\t\tcase 'usage_help':\r\n\t\t\t\t\tcase 'usage_me':\r\n\t\t\t\t\tcase 'unavailable_command':\r\n\t\t\t\t\t\tthis.log.info(basicLog);\r\n\t\t\t\t\t\tthis.emit('notice', channel, msgid, msg);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Ignore this because we are already listening to HOSTTARGET..\r\n\t\t\t\t\tcase 'host_on':\r\n\t\t\t\t\tcase 'host_off':\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif(msg.includes('Login unsuccessful') || msg.includes('Login authentication failed')) {\r\n\t\t\t\t\t\t\tthis.wasCloseCalled = false;\r\n\t\t\t\t\t\t\tthis.reconnect = false;\r\n\t\t\t\t\t\t\tthis.reason = msg;\r\n\t\t\t\t\t\t\tthis.log.error(this.reason);\r\n\t\t\t\t\t\t\tthis.ws.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(msg.includes('Error logging in') || msg.includes('Improperly formatted auth')) {\r\n\t\t\t\t\t\t\tthis.wasCloseCalled = false;\r\n\t\t\t\t\t\t\tthis.reconnect = false;\r\n\t\t\t\t\t\t\tthis.reason = msg;\r\n\t\t\t\t\t\t\tthis.log.error(this.reason);\r\n\t\t\t\t\t\t\tthis.ws.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(msg.includes('Invalid NICK')) {\r\n\t\t\t\t\t\t\tthis.wasCloseCalled = false;\r\n\t\t\t\t\t\t\tthis.reconnect = false;\r\n\t\t\t\t\t\t\tthis.reason = 'Invalid NICK.';\r\n\t\t\t\t\t\t\tthis.log.error(this.reason);\r\n\t\t\t\t\t\t\tthis.ws.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\r\n\t\t\t\t\t\t\tthis.emit('notice', channel, msgid, msg);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Handle subanniversary / resub..\r\n\t\t\tcase 'USERNOTICE': {\r\n\t\t\t\tconst username = tags['display-name'] || tags['login'];\r\n\t\t\t\tconst plan = tags['msg-param-sub-plan'] || '';\r\n\t\t\t\tconst planName = _.unescapeIRC(_.get(tags['msg-param-sub-plan-name'], '')) || null;\r\n\t\t\t\tconst prime = plan.includes('Prime');\r\n\t\t\t\tconst methods = { prime, plan, planName };\r\n\t\t\t\tconst streakMonths = ~~(tags['msg-param-streak-months'] || 0);\r\n\t\t\t\tconst recipient = tags['msg-param-recipient-display-name'] || tags['msg-param-recipient-user-name'];\r\n\t\t\t\tconst giftSubCount = ~~tags['msg-param-mass-gift-count'];\r\n\t\t\t\ttags['message-type'] = msgid;\r\n\r\n\t\t\t\tswitch(msgid) {\r\n\t\t\t\t\t// Handle resub\r\n\t\t\t\t\tcase 'resub':\r\n\t\t\t\t\t\tthis.emits([ 'resub', 'subanniversary' ], [\r\n\t\t\t\t\t\t\t[ channel, username, streakMonths, msg, tags, methods ]\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle sub\r\n\t\t\t\t\tcase 'sub':\r\n\t\t\t\t\t\tthis.emits([ 'subscription', 'sub' ], [\r\n\t\t\t\t\t\t\t[ channel, username, methods, msg, tags ]\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle gift sub\r\n\t\t\t\t\tcase 'subgift':\r\n\t\t\t\t\t\tthis.emit('subgift', channel, username, streakMonths, recipient, methods, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle anonymous gift sub\r\n\t\t\t\t\t// Need proof that this event occur\r\n\t\t\t\t\tcase 'anonsubgift':\r\n\t\t\t\t\t\tthis.emit('anonsubgift', channel, streakMonths, recipient, methods, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle random gift subs\r\n\t\t\t\t\tcase 'submysterygift':\r\n\t\t\t\t\t\tthis.emit('submysterygift', channel, username, giftSubCount, methods, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle anonymous random gift subs\r\n\t\t\t\t\t// Need proof that this event occur\r\n\t\t\t\t\tcase 'anonsubmysterygift':\r\n\t\t\t\t\t\tthis.emit('anonsubmysterygift', channel, giftSubCount, methods, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle user upgrading from Prime to a normal tier sub\r\n\t\t\t\t\tcase 'primepaidupgrade':\r\n\t\t\t\t\t\tthis.emit('primepaidupgrade', channel, username, methods, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle user upgrading from a gifted sub\r\n\t\t\t\t\tcase 'giftpaidupgrade': {\r\n\t\t\t\t\t\tconst sender = tags['msg-param-sender-name'] || tags['msg-param-sender-login'];\r\n\t\t\t\t\t\tthis.emit('giftpaidupgrade', channel, username, sender, tags);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Handle user upgrading from an anonymous gifted sub\r\n\t\t\t\t\tcase 'anongiftpaidupgrade':\r\n\t\t\t\t\t\tthis.emit('anongiftpaidupgrade', channel, username, tags);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Handle raid\r\n\t\t\t\t\tcase 'raid': {\r\n\t\t\t\t\t\tconst username = tags['msg-param-displayName'] || tags['msg-param-login'];\r\n\t\t\t\t\t\tconst viewers = +tags['msg-param-viewerCount'];\r\n\t\t\t\t\t\tthis.emit('raided', channel, username, viewers, tags);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Handle ritual\r\n\t\t\t\t\tcase 'ritual': {\r\n\t\t\t\t\t\tconst ritualName = tags['msg-param-ritual-name'];\r\n\t\t\t\t\t\tswitch(ritualName) {\r\n\t\t\t\t\t\t\t// Handle new chatter ritual\r\n\t\t\t\t\t\t\tcase 'new_chatter':\r\n\t\t\t\t\t\t\t\tthis.emit('newchatter', channel, username, tags, msg);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t// All unknown rituals should be passed through\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthis.emit('ritual', ritualName, channel, username, tags, msg);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// All other msgid events should be emitted under a usernotice event\r\n\t\t\t\t\t// until it comes up and needs to be added..\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.emit('usernotice', msgid, channel, tags, msg);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Channel is now hosting another channel or exited host mode..\r\n\t\t\tcase 'HOSTTARGET': {\r\n\t\t\t\tconst msgSplit = msg.split(' ');\r\n\t\t\t\tconst viewers = ~~msgSplit[1] || 0;\r\n\t\t\t\t// Stopped hosting..\r\n\t\t\t\tif(msgSplit[0] === '-') {\r\n\t\t\t\t\tthis.log.info(`[${channel}] Exited host mode.`);\r\n\t\t\t\t\tthis.emits([ 'unhost', '_promiseUnhost' ], [ [ channel, viewers ], [ null ] ]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Now hosting..\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.log.info(`[${channel}] Now hosting ${msgSplit[0]} for ${viewers} viewer(s).`);\r\n\t\t\t\t\tthis.emit('hosting', channel, msgSplit[0], viewers);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Someone has been timed out or chat has been cleared by a moderator..\r\n\t\t\tcase 'CLEARCHAT':\r\n\t\t\t\t// User has been banned / timed out by a moderator..\r\n\t\t\t\tif(message.params.length > 1) {\r\n\t\t\t\t\t// Duration returns null if it's a ban, otherwise it's a timeout..\r\n\t\t\t\t\tconst duration = _.get(message.tags['ban-duration'], null);\r\n\r\n\t\t\t\t\tif(duration === null) {\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] ${msg} has been banned.`);\r\n\t\t\t\t\t\tthis.emit('ban', channel, msg, null, message.tags);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.log.info(`[${channel}] ${msg} has been timed out for ${duration} seconds.`);\r\n\t\t\t\t\t\tthis.emit('timeout', channel, msg, null, ~~duration, message.tags);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Chat was cleared by a moderator..\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.log.info(`[${channel}] Chat was cleared by a moderator.`);\r\n\t\t\t\t\tthis.emits([ 'clearchat', '_promiseClear' ], [ [ channel ], [ null ] ]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Someone's message has been deleted\r\n\t\t\tcase 'CLEARMSG':\r\n\t\t\t\tif(message.params.length > 1) {\r\n\t\t\t\t\tconst deletedMessage = msg;\r\n\t\t\t\t\tconst username = tags['login'];\r\n\t\t\t\t\ttags['message-type'] = 'messagedeleted';\r\n\r\n\t\t\t\t\tthis.log.info(`[${channel}] ${username}'s message has been deleted.`);\r\n\t\t\t\t\tthis.emit('messagedeleted', channel, username, deletedMessage, tags);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Received a reconnection request from the server..\r\n\t\t\tcase 'RECONNECT':\r\n\t\t\t\tthis.log.info('Received RECONNECT request from Twitch..');\r\n\t\t\t\tthis.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n\t\t\t\tthis.disconnect().catch(err => this.log.error(err));\r\n\t\t\t\tsetTimeout(() => this.connect().catch(err => this.log.error(err)), this.reconnectTimer);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Received when joining a channel and every time you send a PRIVMSG to a channel.\r\n\t\t\tcase 'USERSTATE':\r\n\t\t\t\tmessage.tags.username = this.username;\r\n\r\n\t\t\t\t// Add the client to the moderators of this room..\r\n\t\t\t\tif(message.tags['user-type'] === 'mod') {\r\n\t\t\t\t\tif(!this.moderators[channel]) {\r\n\t\t\t\t\t\tthis.moderators[channel] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this.moderators[channel].includes(this.username)) {\r\n\t\t\t\t\t\tthis.moderators[channel].push(this.username);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Logged in and username doesn't start with justinfan..\r\n\t\t\t\tif(!_.isJustinfan(this.getUsername()) && !this.userstate[channel]) {\r\n\t\t\t\t\tthis.userstate[channel] = tags;\r\n\t\t\t\t\tthis.lastJoined = channel;\r\n\t\t\t\t\tthis.channels.push(channel);\r\n\t\t\t\t\tthis.log.info(`Joined ${channel}`);\r\n\t\t\t\t\tthis.emit('join', channel, _.username(this.getUsername()), true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Emote-sets has changed, update it..\r\n\t\t\t\tif(message.tags['emote-sets'] !== this.emotes) {\r\n\t\t\t\t\tthis._updateEmoteset(message.tags['emote-sets']);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.userstate[channel] = tags;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Describe non-channel-specific state informations..\r\n\t\t\tcase 'GLOBALUSERSTATE':\r\n\t\t\t\tthis.globaluserstate = tags;\r\n\t\t\t\tthis.emit('globaluserstate', tags);\r\n\r\n\t\t\t\t// Received emote-sets..\r\n\t\t\t\tif(typeof message.tags['emote-sets'] !== 'undefined') {\r\n\t\t\t\t\tthis._updateEmoteset(message.tags['emote-sets']);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Received when joining a channel and every time one of the chat room settings, like slow mode, change.\r\n\t\t\t// The message on join contains all room settings.\r\n\t\t\tcase 'ROOMSTATE':\r\n\t\t\t\t// We use this notice to know if we successfully joined a channel..\r\n\t\t\t\tif(_.channel(this.lastJoined) === channel) { this.emit('_promiseJoin', null, channel); }\r\n\r\n\t\t\t\t// Provide the channel name in the tags before emitting it..\r\n\t\t\t\tmessage.tags.channel = channel;\r\n\t\t\t\tthis.emit('roomstate', channel, message.tags);\r\n\r\n\t\t\t\tif(!_.hasOwn(message.tags, 'subs-only')) {\r\n\t\t\t\t\t// Handle slow mode here instead of the slow_on/off notice..\r\n\t\t\t\t\t// This room is now in slow mode. You may send messages every slow_duration seconds.\r\n\t\t\t\t\tif(_.hasOwn(message.tags, 'slow')) {\r\n\t\t\t\t\t\tif(typeof message.tags.slow === 'boolean' && !message.tags.slow) {\r\n\t\t\t\t\t\t\tconst disabled = [ channel, false, 0 ];\r\n\t\t\t\t\t\t\tthis.log.info(`[${channel}] This room is no longer in slow mode.`);\r\n\t\t\t\t\t\t\tthis.emits([ 'slow', 'slowmode', '_promiseSlowoff' ], [ disabled, disabled, [ null ] ]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tconst seconds = ~~message.tags.slow;\r\n\t\t\t\t\t\t\tconst enabled = [ channel, true, seconds ];\r\n\t\t\t\t\t\t\tthis.log.info(`[${channel}] This room is now in slow mode.`);\r\n\t\t\t\t\t\t\tthis.emits([ 'slow', 'slowmode', '_promiseSlow' ], [ enabled, enabled, [ null ] ]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Handle followers only mode here instead of the followers_on/off notice..\r\n\t\t\t\t\t// This room is now in follower-only mode.\r\n\t\t\t\t\t// This room is now in <duration> followers-only mode.\r\n\t\t\t\t\t// This room is no longer in followers-only mode.\r\n\t\t\t\t\t// duration is in minutes (string)\r\n\t\t\t\t\t// -1 when /followersoff (string)\r\n\t\t\t\t\t// false when /followers with no duration (boolean)\r\n\t\t\t\t\tif(_.hasOwn(message.tags, 'followers-only')) {\r\n\t\t\t\t\t\tif(message.tags['followers-only'] === '-1') {\r\n\t\t\t\t\t\t\tconst disabled = [ channel, false, 0 ];\r\n\t\t\t\t\t\t\tthis.log.info(`[${channel}] This room is no longer in followers-only mode.`);\r\n\t\t\t\t\t\t\tthis.emits([ 'followersonly', 'followersmode', '_promiseFollowersoff' ], [ disabled, disabled, [ null ] ]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tconst minutes = ~~message.tags['followers-only'];\r\n\t\t\t\t\t\t\tconst enabled = [ channel, true, minutes ];\r\n\t\t\t\t\t\t\tthis.log.info(`[${channel}] This room is now in follower-only mode.`);\r\n\t\t\t\t\t\t\tthis.emits([ 'followersonly', 'followersmode', '_promiseFollowers' ], [ enabled, enabled, [ null ] ]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Wrong cluster..\r\n\t\t\tcase 'SERVERCHANGE':\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.log.warn(`Could not parse message from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Messages from jtv..\r\n\telse if(message.prefix === 'jtv') {\r\n\t\tswitch(message.command) {\r\n\t\t\tcase 'MODE':\r\n\t\t\t\tif(msg === '+o') {\r\n\t\t\t\t\t// Add username to the moderators..\r\n\t\t\t\t\tif(!this.moderators[channel]) {\r\n\t\t\t\t\t\tthis.moderators[channel] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this.moderators[channel].includes(message.params[2])) {\r\n\t\t\t\t\t\tthis.moderators[channel].push(message.params[2]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emit('mod', channel, message.params[2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if(msg === '-o') {\r\n\t\t\t\t\t// Remove username from the moderators..\r\n\t\t\t\t\tif(!this.moderators[channel]) {\r\n\t\t\t\t\t\tthis.moderators[channel] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.moderators[channel].filter(value => value !== message.params[2]);\r\n\r\n\t\t\t\t\tthis.emit('unmod', channel, message.params[2]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.log.warn(`Could not parse message from jtv:\\n${JSON.stringify(message, null, 4)}`);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Anything else..\r\n\telse {\r\n\t\tswitch(message.command) {\r\n\t\t\tcase '353':\r\n\t\t\t\tthis.emit('names', message.params[2], message.params[3].split(' '));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase '366':\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Someone has joined the channel..\r\n\t\t\tcase 'JOIN': {\r\n\t\t\t\tconst nick = message.prefix.split('!')[0];\r\n\t\t\t\t// Joined a channel as a justinfan (anonymous) user..\r\n\t\t\t\tif(_.isJustinfan(this.getUsername()) && this.username === nick) {\r\n\t\t\t\t\tthis.lastJoined = channel;\r\n\t\t\t\t\tthis.channels.push(channel);\r\n\t\t\t\t\tthis.log.info(`Joined ${channel}`);\r\n\t\t\t\t\tthis.emit('join', channel, nick, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Someone else joined the channel, just emit the join event..\r\n\t\t\t\tif(this.username !== nick) {\r\n\t\t\t\t\tthis.emit('join', channel, nick, false);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Someone has left the channel..\r\n\t\t\tcase 'PART': {\r\n\t\t\t\tlet isSelf = false;\r\n\t\t\t\tconst nick = message.prefix.split('!')[0];\r\n\t\t\t\t// Client left a channel..\r\n\t\t\t\tif(this.username === nick) {\r\n\t\t\t\t\tisSelf = true;\r\n\t\t\t\t\tif(this.userstate[channel]) { delete this.userstate[channel]; }\r\n\r\n\t\t\t\t\tlet index = this.channels.indexOf(channel);\r\n\t\t\t\t\tif(index !== -1) { this.channels.splice(index, 1); }\r\n\r\n\t\t\t\t\tindex = this.opts.channels.indexOf(channel);\r\n\t\t\t\t\tif(index !== -1) { this.opts.channels.splice(index, 1); }\r\n\r\n\t\t\t\t\tthis.log.info(`Left ${channel}`);\r\n\t\t\t\t\tthis.emit('_promisePart', null);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Client or someone else left the channel, emit the part event..\r\n\t\t\t\tthis.emit('part', channel, nick, isSelf);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Received a whisper..\r\n\t\t\tcase 'WHISPER': {\r\n\t\t\t\tconst nick = message.prefix.split('!')[0];\r\n\t\t\t\tthis.log.info(`[WHISPER] <${nick}>: ${msg}`);\r\n\r\n\t\t\t\t// Update the tags to provide the username..\r\n\t\t\t\tif(!_.hasOwn(message.tags, 'username')) {\r\n\t\t\t\t\tmessage.tags.username = nick;\r\n\t\t\t\t}\r\n\t\t\t\tmessage.tags['message-type'] = 'whisper';\r\n\r\n\t\t\t\tconst from = _.channel(message.tags.username);\r\n\t\t\t\t// Emit for both, whisper and message..\r\n\t\t\t\tthis.emits([ 'whisper', 'message' ], [\r\n\t\t\t\t\t[ from, message.tags, msg, false ]\r\n\t\t\t\t]);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase 'PRIVMSG':\r\n\t\t\t\t// Add username (lowercase) to the tags..\r\n\t\t\t\tmessage.tags.username = message.prefix.split('!')[0];\r\n\r\n\t\t\t\t// Message from JTV..\r\n\t\t\t\tif(message.tags.username === 'jtv') {\r\n\t\t\t\t\tconst name = _.username(msg.split(' ')[0]);\r\n\t\t\t\t\tconst autohost = msg.includes('auto');\r\n\t\t\t\t\t// Someone is hosting the channel and the message contains how many viewers..\r\n\t\t\t\t\tif(msg.includes('hosting you for')) {\r\n\t\t\t\t\t\tconst count = _.extractNumber(msg);\r\n\r\n\t\t\t\t\t\tthis.emit('hosted', channel, name, count, autohost);\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// Some is hosting the channel, but no viewer(s) count provided in the message..\r\n\t\t\t\t\telse if(msg.includes('hosting you')) {\r\n\t\t\t\t\t\tthis.emit('hosted', channel, name, 0, autohost);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst messagesLogLevel = _.get(this.opts.options.messagesLogLevel, 'info');\r\n\r\n\t\t\t\t\t// Message is an action (/me <message>)..\r\n\t\t\t\t\tconst actionMessage = _.actionMessage(msg);\r\n\t\t\t\t\tmessage.tags['message-type'] = actionMessage ? 'action' : 'chat';\r\n\t\t\t\t\tmsg = actionMessage ? actionMessage[1] : msg;\r\n\t\t\t\t\t// Check for Bits prior to actions message\r\n\t\t\t\t\tif(_.hasOwn(message.tags, 'bits')) {\r\n\t\t\t\t\t\tthis.emit('cheer', channel, message.tags, msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//Handle Channel Point Redemptions (Require's Text Input)\r\n\t\t\t\t\t\tif(_.hasOwn(message.tags, 'msg-id')) {\r\n\t\t\t\t\t\t\tif(message.tags['msg-id'] === 'highlighted-message') {\r\n\t\t\t\t\t\t\t\tconst rewardtype = message.tags['msg-id'];\r\n\t\t\t\t\t\t\t\tthis.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(message.tags['msg-id'] === 'skip-subs-mode-message') {\r\n\t\t\t\t\t\t\t\tconst rewardtype = message.tags['msg-id'];\r\n\t\t\t\t\t\t\t\tthis.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(_.hasOwn(message.tags, 'custom-reward-id')) {\r\n\t\t\t\t\t\t\tconst rewardtype = message.tags['custom-reward-id'];\r\n\t\t\t\t\t\t\tthis.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(actionMessage) {\r\n\t\t\t\t\t\t\tthis.log[messagesLogLevel](`[${channel}] *<${message.tags.username}>: ${msg}`);\r\n\t\t\t\t\t\t\tthis.emits([ 'action', 'message' ], [\r\n\t\t\t\t\t\t\t\t[ channel, message.tags, msg, false ]\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Message is a regular chat message..\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.log[messagesLogLevel](`[${channel}] <${message.tags.username}>: ${msg}`);\r\n\t\t\t\t\t\t\tthis.emits([ 'chat', 'message' ], [\r\n\t\t\t\t\t\t\t\t[ channel, message.tags, msg, false ]\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.log.warn(`Could not parse message:\\n${JSON.stringify(message, null, 4)}`);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n};\r\n// Connect to server..\r\nclient.prototype.connect = function connect() {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tthis.server = _.get(this.opts.connection.server, 'irc-ws.chat.twitch.tv');\r\n\t\tthis.port = _.get(this.opts.connection.port, 80);\r\n\r\n\t\t// Override port if using a secure connection..\r\n\t\tif(this.secure) { this.port = 443; }\r\n\t\tif(this.port === 443) { this.secure = true; }\r\n\r\n\t\tthis.reconnectTimer = this.reconnectTimer * this.reconnectDecay;\r\n\t\tif(this.reconnectTimer >= this.maxReconnectInterval) {\r\n\t\t\tthis.reconnectTimer = this.maxReconnectInterval;\r\n\t\t}\r\n\r\n\t\t// Connect to server from configuration..\r\n\t\tthis._openConnection();\r\n\t\tthis.once('_promiseConnect', err => {\r\n\t\t\tif(!err) { resolve([ this.server, ~~this.port ]); }\r\n\t\t\telse { reject(err); }\r\n\t\t});\r\n\t});\r\n};\r\n// Open a connection..\r\nclient.prototype._openConnection = function _openConnection() {\r\n\tconst url = `${this.secure ? 'wss' : 'ws'}://${this.server}:${this.port}/`;\r\n\t/** @type {import('ws').ClientOptions} */\r\n\tconst connectionOptions = {};\r\n\tif('agent' in this.opts.connection) {\r\n\t\tconnectionOptions.agent = this.opts.connection.agent;\r\n\t}\r\n\tthis.ws = new _WebSocket(url, 'irc', connectionOptions);\r\n\r\n\tthis.ws.onmessage = this._onMessage.bind(this);\r\n\tthis.ws.onerror = this._onError.bind(this);\r\n\tthis.ws.onclose = this._onClose.bind(this);\r\n\tthis.ws.onopen = this._onOpen.bind(this);\r\n};\r\n// Called when the WebSocket connection's readyState changes to OPEN.\r\n// Indicates that the connection is ready to send and receive data..\r\nclient.prototype._onOpen = function _onOpen() {\r\n\tif(!this._isConnected()) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Emitting \"connecting\" event..\r\n\tthis.log.info(`Connecting to ${this.server} on port ${this.port}..`);\r\n\tthis.emit('connecting', this.server, ~~this.port);\r\n\r\n\tthis.username = _.get(this.opts.identity.username, _.justinfan());\r\n\tthis._getToken()\r\n\t.then(token => {\r\n\t\tconst password = _.password(token);\r\n\r\n\t\t// Emitting \"logon\" event..\r\n\t\tthis.log.info('Sending authentication to server..');\r\n\t\tthis.emit('logon');\r\n\r\n\t\tlet caps = 'twitch.tv/tags twitch.tv/commands';\r\n\t\tif(!this._skipMembership) {\r\n\t\t\tcaps += ' twitch.tv/membership';\r\n\t\t}\r\n\t\tthis.ws.send('CAP REQ :' + caps);\r\n\r\n\t\t// Authentication..\r\n\t\tif(password) {\r\n\t\t\tthis.ws.send(`PASS ${password}`);\r\n\t\t}\r\n\t\telse if(_.isJustinfan(this.username)) {\r\n\t\t\tthis.ws.send('PASS SCHMOOPIIE');\r\n\t\t}\r\n\t\tthis.ws.send(`NICK ${this.username}`);\r\n\t})\r\n\t.catch(err => {\r\n\t\tthis.emits([ '_promiseConnect', 'disconnected' ], [ [ err ], [ 'Could not get a token.' ] ]);\r\n\t});\r\n};\r\n// Fetches a token from the option.\r\nclient.prototype._getToken = function _getToken() {\r\n\tconst passwordOption = this.opts.identity.password;\r\n\tlet password;\r\n\tif(typeof passwordOption === 'function') {\r\n\t\tpassword = passwordOption();\r\n\t\tif(password instanceof Promise) {\r\n\t\t\treturn password;\r\n\t\t}\r\n\t\treturn Promise.resolve(password);\r\n\t}\r\n\treturn Promise.resolve(passwordOption);\r\n};\r\n// Called when a message is received from the server..\r\nclient.prototype._onMessage = function _onMessage(event) {\r\n\tconst parts = event.data.trim().split('\\r\\n');\r\n\r\n\tparts.forEach(str => {\r\n\t\tconst msg = parse.msg(str);\r\n\t\tif(msg) {\r\n\t\t\tthis.handleMessage(msg);\r\n\t\t}\r\n\t});\r\n};\r\n// Called when an error occurs..\r\nclient.prototype._onError = function _onError() {\r\n\tthis.moderators = {};\r\n\tthis.userstate = {};\r\n\tthis.globaluserstate = {};\r\n\r\n\t// Stop the internal ping timeout check interval..\r\n\tclearInterval(this.pingLoop);\r\n\tclearTimeout(this.pingTimeout);\r\n\tclearTimeout(this._updateEmotesetsTimer);\r\n\r\n\tthis.reason = this.ws === null ? 'Connection closed.' : 'Unable to connect.';\r\n\r\n\tthis.emits([ '_promiseConnect', 'disconnected' ], [ [ this.reason ] ]);\r\n\r\n\t// Reconnect to server..\r\n\tif(this.reconnect && this.reconnections === this.maxReconnectAttempts) {\r\n\t\tthis.emit('maxreconnect');\r\n\t\tthis.log.error('Maximum reconnection attempts reached.');\r\n\t}\r\n\tif(this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {\r\n\t\tthis.reconnecting = true;\r\n\t\tthis.reconnections = this.reconnections + 1;\r\n\t\tthis.log.error(`Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n\t\tthis.emit('reconnect');\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.reconnecting = false;\r\n\t\t\tthis.connect().catch(err => this.log.error(err));\r\n\t\t}, this.reconnectTimer);\r\n\t}\r\n\r\n\tthis.ws = null;\r\n};\r\n// Called when the WebSocket connection's readyState changes to CLOSED..\r\nclient.prototype._onClose = function _onClose() {\r\n\tthis.moderators = {};\r\n\tthis.userstate = {};\r\n\tthis.globaluserstate = {};\r\n\r\n\t// Stop the internal ping timeout check interval..\r\n\tclearInterval(this.pingLoop);\r\n\tclearTimeout(this.pingTimeout);\r\n\tclearTimeout(this._updateEmotesetsTimer);\r\n\r\n\t// User called .disconnect(), don't try to reconnect.\r\n\tif(this.wasCloseCalled) {\r\n\t\tthis.wasCloseCalled = false;\r\n\t\tthis.reason = 'Connection closed.';\r\n\t\tthis.log.info(this.reason);\r\n\t\tthis.emits([ '_promiseConnect', '_promiseDisconnect', 'disconnected' ], [ [ this.reason ], [ null ], [ this.reason ] ]);\r\n\t}\r\n\r\n\t// Got disconnected from server..\r\n\telse {\r\n\t\tthis.emits([ '_promiseConnect', 'disconnected' ], [ [ this.reason ] ]);\r\n\r\n\t\t// Reconnect to server..\r\n\t\tif(this.reconnect && this.reconnections === this.maxReconnectAttempts) {\r\n\t\t\tthis.emit('maxreconnect');\r\n\t\t\tthis.log.error('Maximum reconnection attempts reached.');\r\n\t\t}\r\n\t\tif(this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {\r\n\t\t\tthis.reconnecting = true;\r\n\t\t\tthis.reconnections = this.reconnections + 1;\r\n\t\t\tthis.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n\t\t\tthis.emit('reconnect');\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.reconnecting = false;\r\n\t\t\t\tthis.connect().catch(err => this.log.error(err));\r\n\t\t\t}, this.reconnectTimer);\r\n\t\t}\r\n\t}\r\n\r\n\tthis.ws = null;\r\n};\r\n// Minimum of 600ms for command promises, if current latency exceeds, add 100ms to it to make sure it doesn't get timed out..\r\nclient.prototype._getPromiseDelay = function _getPromiseDelay() {\r\n\tif(this.currentLatency <= 600) { return 600; }\r\n\telse { return this.currentLatency + 100; }\r\n};\r\n// Send command to server or channel..\r\nclient.prototype._sendCommand = function _sendCommand(delay, channel, command, fn) {\r\n\t// Race promise against delay..\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// Make sure the socket is opened..\r\n\t\tif(!this._isConnected()) {\r\n\t\t\t// Disconnected from server..\r\n\t\t\treturn reject('Not connected to server.');\r\n\t\t}\r\n\t\telse if(delay === null || typeof delay === 'number') {\r\n\t\t\tif(delay === null) {\r\n\t\t\t\tdelay = this._getPromiseDelay();\r\n\t\t\t}\r\n\t\t\t_.promiseDelay(delay).then(() => reject('No response from Twitch.'));\r\n\t\t}\r\n\r\n\t\t// Executing a command on a channel..\r\n\t\tif(channel !== null) {\r\n\t\t\tconst chan = _.channel(channel);\r\n\t\t\tthis.log.info(`[${chan}] Executing command: ${command}`);\r\n\t\t\tthis.ws.send(`PRIVMSG ${chan} :${command}`);\r\n\t\t}\r\n\t\t// Executing a raw command..\r\n\t\telse {\r\n\t\t\tthis.log.info(`Executing command: ${command}`);\r\n\t\t\tthis.ws.send(command);\r\n\t\t}\r\n\t\tif(typeof fn === 'function') {\r\n\t\t\tfn(resolve, reject);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresolve();\r\n\t\t}\r\n\t});\r\n};\r\n// Send a message to channel..\r\nclient.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {\r\n\t// Promise a result..\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// Make sure the socket is opened and not logged in as a justinfan user..\r\n\t\tif(!this._isConnected()) {\r\n\t\t\treturn reject('Not connected to server.');\r\n\t\t}\r\n\t\telse if(_.isJustinfan(this.getUsername())) {\r\n\t\t\treturn reject('Cannot send anonymous messages.');\r\n\t\t}\r\n\t\tconst chan = _.channel(channel);\r\n\t\tif(!this.userstate[chan]) { this.userstate[chan] = {}; }\r\n\r\n\t\t// Split long lines otherwise they will be eaten by the server..\r\n\t\tif(message.length >= 500) {\r\n\t\t\tconst msg = _.splitLine(message, 500);\r\n\t\t\tmessage = msg[0];\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis._sendMessage(delay, channel, msg[1], () => {});\r\n\t\t\t}, 350);\r\n\t\t}\r\n\r\n\t\tthis.ws.send(`PRIVMSG ${chan} :${message}`);\r\n\r\n\t\tconst emotes = {};\r\n\r\n\t\t// Parse regex and string emotes..\r\n\t\tObject.keys(this.emotesets).forEach(id => this.emotesets[id].forEach(emote => {\r\n\t\t\tconst emoteFunc = _.isRegex(emote.code) ? parse.emoteRegex : parse.emoteString;\r\n\t\t\treturn emoteFunc(message, emote.code, emote.id, emotes);\r\n\t\t})\r\n\t\t);\r\n\r\n\t\t// Merge userstate with parsed emotes..\r\n\t\tconst userstate = Object.assign(\r\n\t\t\tthis.userstate[chan],\r\n\t\t\tparse.emotes({ emotes: parse.transformEmotes(emotes) || null })\r\n\t\t);\r\n\r\n\t\tconst messagesLogLevel = _.get(this.opts.options.messagesLogLevel, 'info');\r\n\r\n\t\t// Message is an action (/me <message>)..\r\n\t\tconst actionMessage = _.actionMessage(message);\r\n\t\tif(actionMessage) {\r\n\t\t\tuserstate['message-type'] = 'action';\r\n\t\t\tthis.log[messagesLogLevel](`[${chan}] *<${this.getUsername()}>: ${actionMessage[1]}`);\r\n\t\t\tthis.emits([ 'action', 'message' ], [\r\n\t\t\t\t[ chan, userstate, actionMessage[1], true ]\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\r\n\t\t// Message is a regular chat message..\r\n\t\telse {\r\n\t\t\tuserstate['message-type'] = 'chat';\r\n\t\t\tthis.log[messagesLogLevel](`[${chan}] <${this.getUsername()}>: ${message}`);\r\n\t\t\tthis.emits([ 'chat', 'message' ], [\r\n\t\t\t\t[ chan, userstate, message, true ]\r\n\t\t\t]);\r\n\t\t}\r\n\t\tif(typeof fn === 'function') {\r\n\t\t\tfn(resolve, reject);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresolve();\r\n\t\t}\r\n\t});\r\n};\r\n// Grab the emote-sets object from the API..\r\nclient.prototype._updateEmoteset = function _updateEmoteset(sets) {\r\n\tlet setsChanges = sets !== undefined;\r\n\tif(setsChanges) {\r\n\t\tif(sets === this.emotes) {\r\n\t\t\tsetsChanges = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.emotes = sets;\r\n\t\t}\r\n\t}\r\n\tif(this._skipUpdatingEmotesets) {\r\n\t\tif(setsChanges) {\r\n\t\t\tthis.emit('emotesets', sets, {});\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tconst setEmotesetTimer = () => {\r\n\t\tif(this._updateEmotesetsTimerDelay > 0) {\r\n\t\t\tclearTimeout(this._updateEmotesetsTimer);\r\n\t\t\tthis._updateEmotesetsTimer = setTimeout(() => this._updateEmoteset(sets), this._updateEmotesetsTimerDelay);\r\n\t\t}\r\n\t};\r\n\tthis._getToken()\r\n\t.then(token => {\r\n\t\tconst url = `https://api.twitch.tv/kraken/chat/emoticon_images?emotesets=${sets}`;\r\n\t\t/** @type {import('node-fetch').RequestInit} */\r\n\t\tconst fetchOptions = {};\r\n\t\tif('fetchAgent' in this.opts.connection) {\r\n\t\t\tfetchOptions.agent = this.opts.connection.fetchAgent;\r\n\t\t}\r\n\t\t/** @type {import('node-fetch').Response} */\r\n\t\treturn _fetch(url, {\r\n\t\t\t...fetchOptions,\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/vnd.twitchtv.v5+json',\r\n\t\t\t\t'Authorization': `OAuth ${_.token(token)}`,\r\n\t\t\t\t'Client-ID': this.clientId\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\t.then(res => res.json())\r\n\t.then(data => {\r\n\t\tthis.emotesets = data.emoticon_sets || {};\r\n\t\tthis.emit('emotesets', sets, this.emotesets);\r\n\t\tsetEmotesetTimer();\r\n\t})\r\n\t.catch(() => setEmotesetTimer());\r\n};\r\n// Get current username..\r\nclient.prototype.getUsername = function getUsername() {\r\n\treturn this.username;\r\n};\r\n// Get current options..\r\nclient.prototype.getOptions = function getOptions() {\r\n\treturn this.opts;\r\n};\r\n// Get current channels..\r\nclient.prototype.getChannels = function getChannels() {\r\n\treturn this.channels;\r\n};\r\n// Check if username is a moderator on a channel..\r\nclient.prototype.isMod = function isMod(channel, username) {\r\n\tconst chan = _.channel(channel);\r\n\tif(!this.moderators[chan]) { this.moderators[chan] = []; }\r\n\treturn this.moderators[chan].includes(_.username(username));\r\n};\r\n// Get readyState..\r\nclient.prototype.readyState = function readyState() {\r\n\tif(this.ws === null) { return 'CLOSED'; }\r\n\treturn [ 'CONNECTING', 'OPEN', 'CLOSING', 'CLOSED' ][this.ws.readyState];\r\n};\r\n// Determine if the client has a WebSocket and it's open..\r\nclient.prototype._isConnected = function _isConnected() {\r\n\treturn this.ws !== null && this.ws.readyState === 1;\r\n};\r\n// Disconnect from server..\r\nclient.prototype.disconnect = function disconnect() {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif(this.ws !== null && this.ws.readyState !== 3) {\r\n\t\t\tthis.wasCloseCalled = true;\r\n\t\t\tthis.log.info('Disconnecting from server..');\r\n\t\t\tthis.ws.close();\r\n\t\t\tthis.once('_promiseDisconnect', () => resolve([ this.server, ~~this.port ]));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.log.error('Cannot disconnect from server. Socket is not opened or connection is already closing.');\r\n\t\t\treject('Cannot disconnect from server. Socket is not opened or connection is already closing.');\r\n\t\t}\r\n\t});\r\n};\r\nclient.prototype.off = client.prototype.removeListener;\r\n\r\n// Expose everything, for browser and Node..\r\nif(typeof module !== 'undefined' && module.exports) {\r\n\tmodule.exports = client;\r\n}\r\nif(typeof window !== 'undefined') {\r\n\twindow.tmi = {\r\n\t\tclient,\r\n\t\tClient: client\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"script"}