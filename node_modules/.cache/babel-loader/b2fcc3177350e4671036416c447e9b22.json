{"ast":null,"code":"const _ = require('./utils'); // Enable followers-only mode on a channel..\n\n\nfunction followersonly(channel, minutes) {\n  channel = _.channel(channel);\n  minutes = _.get(minutes, 30); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, `/followers ${minutes}`, (resolve, reject) => {\n    // Received _promiseFollowers event, resolve or reject..\n    this.once('_promiseFollowers', err => {\n      if (!err) {\n        resolve([channel, ~~minutes]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable followers-only mode on a channel..\n\n\nfunction followersonlyoff(channel) {\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, '/followersoff', (resolve, reject) => {\n    // Received _promiseFollowersoff event, resolve or reject..\n    this.once('_promiseFollowersoff', err => {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Leave a channel..\n\n\nfunction part(channel) {\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, null, `PART ${channel}`, (resolve, reject) => {\n    // Received _promisePart event, resolve or reject..\n    this.once('_promisePart', err => {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Enable R9KBeta mode on a channel..\n\n\nfunction r9kbeta(channel) {\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, '/r9kbeta', (resolve, reject) => {\n    // Received _promiseR9kbeta event, resolve or reject..\n    this.once('_promiseR9kbeta', err => {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable R9KBeta mode on a channel..\n\n\nfunction r9kbetaoff(channel) {\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, '/r9kbetaoff', (resolve, reject) => {\n    // Received _promiseR9kbetaoff event, resolve or reject..\n    this.once('_promiseR9kbetaoff', err => {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Enable slow mode on a channel..\n\n\nfunction slow(channel, seconds) {\n  channel = _.channel(channel);\n  seconds = _.get(seconds, 300); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, `/slow ${seconds}`, (resolve, reject) => {\n    // Received _promiseSlow event, resolve or reject..\n    this.once('_promiseSlow', err => {\n      if (!err) {\n        resolve([channel, ~~seconds]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable slow mode on a channel..\n\n\nfunction slowoff(channel) {\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(null, channel, '/slowoff', (resolve, reject) => {\n    // Received _promiseSlowoff event, resolve or reject..\n    this.once('_promiseSlowoff', err => {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  // Send action message (/me <message>) on a channel..\n  action(channel, message) {\n    channel = _.channel(channel);\n    message = `\\u0001ACTION ${message}\\u0001`; // Send the command to the server and race the Promise against a delay..\n\n    return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n\n  // Ban username on channel..\n  ban(channel, username, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n    reason = _.get(reason, ''); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/ban ${username} ${reason}`, (resolve, reject) => {\n      // Received _promiseBan event, resolve or reject..\n      this.once('_promiseBan', err => {\n        if (!err) {\n          resolve([channel, username, reason]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Clear all messages on a channel..\n  clear(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/clear', (resolve, reject) => {\n      // Received _promiseClear event, resolve or reject..\n      this.once('_promiseClear', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Change the color of your username..\n  color(channel, newColor) {\n    newColor = _.get(newColor, channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, '#tmijs', `/color ${newColor}`, (resolve, reject) => {\n      // Received _promiseColor event, resolve or reject..\n      this.once('_promiseColor', err => {\n        if (!err) {\n          resolve([newColor]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Run commercial on a channel for X seconds..\n  commercial(channel, seconds) {\n    channel = _.channel(channel);\n    seconds = _.get(seconds, 30); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/commercial ${seconds}`, (resolve, reject) => {\n      // Received _promiseCommercial event, resolve or reject..\n      this.once('_promiseCommercial', err => {\n        if (!err) {\n          resolve([channel, ~~seconds]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Delete a specific message on a channel\n  deletemessage(channel, messageUUID) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/delete ${messageUUID}`, (resolve, reject) => {\n      // Received _promiseDeletemessage event, resolve or reject..\n      this.once('_promiseDeletemessage', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Enable emote-only mode on a channel..\n  emoteonly(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/emoteonly', (resolve, reject) => {\n      // Received _promiseEmoteonly event, resolve or reject..\n      this.once('_promiseEmoteonly', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Disable emote-only mode on a channel..\n  emoteonlyoff(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/emoteonlyoff', (resolve, reject) => {\n      // Received _promiseEmoteonlyoff event, resolve or reject..\n      this.once('_promiseEmoteonlyoff', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Enable followers-only mode on a channel..\n  followersonly,\n  // Alias for followersonly()..\n  followersmode: followersonly,\n  // Disable followers-only mode on a channel..\n  followersonlyoff,\n  // Alias for followersonlyoff()..\n  followersmodeoff: followersonlyoff,\n\n  // Host a channel..\n  host(channel, target) {\n    channel = _.channel(channel);\n    target = _.username(target); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(2000, channel, `/host ${target}`, (resolve, reject) => {\n      // Received _promiseHost event, resolve or reject..\n      this.once('_promiseHost', (err, remaining) => {\n        if (!err) {\n          resolve([channel, target, ~~remaining]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Join a channel..\n  join(channel) {\n    channel = _.channel(channel); // Send the command to the server ..\n\n    return this._sendCommand(undefined, null, `JOIN ${channel}`, (resolve, reject) => {\n      const eventName = '_promiseJoin';\n      let hasFulfilled = false;\n\n      const listener = (err, joinedChannel) => {\n        if (channel === _.channel(joinedChannel)) {\n          // Received _promiseJoin event for the target channel, resolve or reject..\n          this.removeListener(eventName, listener);\n          hasFulfilled = true;\n\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        }\n      };\n\n      this.on(eventName, listener); // Race the Promise against a delay..\n\n      const delay = this._getPromiseDelay();\n\n      _.promiseDelay(delay).then(() => {\n        if (!hasFulfilled) {\n          this.emit(eventName, 'No response from Twitch.', channel);\n        }\n      });\n    });\n  },\n\n  // Mod username on channel..\n  mod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/mod ${username}`, (resolve, reject) => {\n      // Received _promiseMod event, resolve or reject..\n      this.once('_promiseMod', err => {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Get list of mods on a channel..\n  mods(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/mods', (resolve, reject) => {\n      // Received _promiseMods event, resolve or reject..\n      this.once('_promiseMods', (err, mods) => {\n        if (!err) {\n          // Update the internal list of moderators..\n          mods.forEach(username => {\n            if (!this.moderators[channel]) {\n              this.moderators[channel] = [];\n            }\n\n            if (!this.moderators[channel].includes(username)) {\n              this.moderators[channel].push(username);\n            }\n          });\n          resolve(mods);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Leave a channel..\n  part,\n  // Alias for part()..\n  leave: part,\n\n  // Send a ping to the server..\n  ping() {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(null, null, 'PING', (resolve, _reject) => {\n      // Update the internal ping timeout check interval..\n      this.latency = new Date();\n      this.pingTimeout = setTimeout(() => {\n        if (this.ws !== null) {\n          this.wasCloseCalled = false;\n          this.log.error('Ping timeout.');\n          this.ws.close();\n          clearInterval(this.pingLoop);\n          clearTimeout(this.pingTimeout);\n        }\n      }, _.get(this.opts.connection.timeout, 9999)); // Received _promisePing event, resolve or reject..\n\n      this.once('_promisePing', latency => resolve([parseFloat(latency)]));\n    });\n  },\n\n  // Enable R9KBeta mode on a channel..\n  r9kbeta,\n  // Alias for r9kbeta()..\n  r9kmode: r9kbeta,\n  // Disable R9KBeta mode on a channel..\n  r9kbetaoff,\n  // Alias for r9kbetaoff()..\n  r9kmodeoff: r9kbetaoff,\n\n  // Send a raw message to the server..\n  raw(message) {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(null, null, message, (resolve, _reject) => {\n      resolve([message]);\n    });\n  },\n\n  // Send a message on a channel..\n  say(channel, message) {\n    channel = _.channel(channel);\n\n    if (message.startsWith('.') && !message.startsWith('..') || message.startsWith('/') || message.startsWith('\\\\')) {\n      // Check if the message is an action message..\n      if (message.substr(1, 3) === 'me ') {\n        return this.action(channel, message.substr(4));\n      } else {\n        // Send the command to the server and race the Promise against a delay..\n        return this._sendCommand(null, channel, message, (resolve, _reject) => {\n          // At this time, there is no possible way to detect if a message has been sent has been eaten\n          // by the server, so we can only resolve the Promise.\n          resolve([channel, message]);\n        });\n      }\n    } // Send the command to the server and race the Promise against a delay..\n\n\n    return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n\n  // Enable slow mode on a channel..\n  slow,\n  // Alias for slow()..\n  slowmode: slow,\n  // Disable slow mode on a channel..\n  slowoff,\n  // Alias for slowoff()..\n  slowmodeoff: slowoff,\n\n  // Enable subscribers mode on a channel..\n  subscribers(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/subscribers', (resolve, reject) => {\n      // Received _promiseSubscribers event, resolve or reject..\n      this.once('_promiseSubscribers', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Disable subscribers mode on a channel..\n  subscribersoff(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/subscribersoff', (resolve, reject) => {\n      // Received _promiseSubscribersoff event, resolve or reject..\n      this.once('_promiseSubscribersoff', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Timeout username on channel for X seconds..\n  timeout(channel, username, seconds, reason) {\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    if (seconds !== null && !_.isInteger(seconds)) {\n      reason = seconds;\n      seconds = 300;\n    }\n\n    seconds = _.get(seconds, 300);\n    reason = _.get(reason, ''); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/timeout ${username} ${seconds} ${reason}`, (resolve, reject) => {\n      // Received _promiseTimeout event, resolve or reject..\n      this.once('_promiseTimeout', err => {\n        if (!err) {\n          resolve([channel, username, ~~seconds, reason]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Unban username on channel..\n  unban(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/unban ${username}`, (resolve, reject) => {\n      // Received _promiseUnban event, resolve or reject..\n      this.once('_promiseUnban', err => {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // End the current hosting..\n  unhost(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(2000, channel, '/unhost', (resolve, reject) => {\n      // Received _promiseUnhost event, resolve or reject..\n      this.once('_promiseUnhost', err => {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Unmod username on channel..\n  unmod(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/unmod ${username}`, (resolve, reject) => {\n      // Received _promiseUnmod event, resolve or reject..\n      this.once('_promiseUnmod', err => {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Unvip username on channel..\n  unvip(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/unvip ${username}`, (resolve, reject) => {\n      // Received _promiseUnvip event, resolve or reject..\n      this.once('_promiseUnvip', err => {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Add username to VIP list on channel..\n  vip(channel, username) {\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, `/vip ${username}`, (resolve, reject) => {\n      // Received _promiseVip event, resolve or reject..\n      this.once('_promiseVip', err => {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Get list of VIPs on a channel..\n  vips(channel) {\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(null, channel, '/vips', (resolve, reject) => {\n      // Received _promiseVips event, resolve or reject..\n      this.once('_promiseVips', (err, vips) => {\n        if (!err) {\n          resolve(vips);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n\n  // Send an whisper message to a user..\n  whisper(username, message) {\n    username = _.username(username); // The server will not send a whisper to the account that sent it.\n\n    if (username === this.getUsername()) {\n      return Promise.reject('Cannot send a whisper to the same account.');\n    } // Send the command to the server and race the Promise against a delay..\n\n\n    return this._sendCommand(null, '#tmijs', `/w ${username} ${message}`, (_resolve, reject) => {\n      this.once('_promiseWhisper', err => {\n        if (err) {\n          reject(err);\n        }\n      });\n    }).catch(err => {\n      // Either an \"actual\" error occured or the timeout triggered\n      // the latter means no errors have occured and we can resolve\n      // else just elevate the error\n      if (err && typeof err === 'string' && err.indexOf('No response from Twitch.') !== 0) {\n        throw err;\n      }\n\n      const from = _.channel(username);\n\n      const userstate = Object.assign({\n        'message-type': 'whisper',\n        'message-id': null,\n        'thread-id': null,\n        username: this.getUsername()\n      }, this.globaluserstate); // Emit for both, whisper and message..\n\n      this.emits(['whisper', 'message'], [[from, userstate, message, true], [from, userstate, message, true]]);\n      return [username, message];\n    });\n  }\n\n};","map":{"version":3,"sources":["D:/Programming Projects/twitch-chat-combiner-js/node_modules/tmi.js/lib/commands.js"],"names":["_","require","followersonly","channel","minutes","get","_sendCommand","resolve","reject","once","err","followersonlyoff","part","r9kbeta","r9kbetaoff","slow","seconds","slowoff","module","exports","action","message","_sendMessage","_getPromiseDelay","_reject","ban","username","reason","clear","color","newColor","commercial","deletemessage","messageUUID","emoteonly","emoteonlyoff","followersmode","followersmodeoff","host","target","remaining","join","undefined","eventName","hasFulfilled","listener","joinedChannel","removeListener","on","delay","promiseDelay","then","emit","mod","mods","forEach","moderators","includes","push","leave","ping","latency","Date","pingTimeout","setTimeout","ws","wasCloseCalled","log","error","close","clearInterval","pingLoop","clearTimeout","opts","connection","timeout","parseFloat","r9kmode","r9kmodeoff","raw","say","startsWith","substr","slowmode","slowmodeoff","subscribers","subscribersoff","isInteger","unban","unhost","unmod","unvip","vip","vips","whisper","getUsername","Promise","_resolve","catch","indexOf","from","userstate","Object","assign","globaluserstate","emits"],"mappings":"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","sourcesContent":["const _ = require('./utils');\n\n// Enable followers-only mode on a channel..\nfunction followersonly(channel, minutes) {\n\tchannel = _.channel(channel);\n\tminutes = _.get(minutes, 30);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, `/followers ${minutes}`, (resolve, reject) => {\n\t\t// Received _promiseFollowers event, resolve or reject..\n\t\tthis.once('_promiseFollowers', err => {\n\t\t\tif(!err) { resolve([ channel, ~~minutes ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable followers-only mode on a channel..\nfunction followersonlyoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, '/followersoff', (resolve, reject) => {\n\t\t// Received _promiseFollowersoff event, resolve or reject..\n\t\tthis.once('_promiseFollowersoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Leave a channel..\nfunction part(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, null, `PART ${channel}`, (resolve, reject) => {\n\t\t// Received _promisePart event, resolve or reject..\n\t\tthis.once('_promisePart', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Enable R9KBeta mode on a channel..\nfunction r9kbeta(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, '/r9kbeta', (resolve, reject) => {\n\t\t// Received _promiseR9kbeta event, resolve or reject..\n\t\tthis.once('_promiseR9kbeta', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable R9KBeta mode on a channel..\nfunction r9kbetaoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, '/r9kbetaoff', (resolve, reject) => {\n\t\t// Received _promiseR9kbetaoff event, resolve or reject..\n\t\tthis.once('_promiseR9kbetaoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Enable slow mode on a channel..\nfunction slow(channel, seconds) {\n\tchannel = _.channel(channel);\n\tseconds = _.get(seconds, 300);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, `/slow ${seconds}`, (resolve, reject) => {\n\t\t// Received _promiseSlow event, resolve or reject..\n\t\tthis.once('_promiseSlow', err => {\n\t\t\tif(!err) { resolve([ channel, ~~seconds ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable slow mode on a channel..\nfunction slowoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(null, channel, '/slowoff', (resolve, reject) => {\n\t\t// Received _promiseSlowoff event, resolve or reject..\n\t\tthis.once('_promiseSlowoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\nmodule.exports = {\n\t// Send action message (/me <message>) on a channel..\n\taction(channel, message) {\n\t\tchannel = _.channel(channel);\n\t\tmessage = `\\u0001ACTION ${message}\\u0001`;\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\tresolve([ channel, message ]);\n\t\t});\n\t},\n\n\t// Ban username on channel..\n\tban(channel, username, reason) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\treason = _.get(reason, '');\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/ban ${username} ${reason}`, (resolve, reject) => {\n\t\t\t// Received _promiseBan event, resolve or reject..\n\t\t\tthis.once('_promiseBan', err => {\n\t\t\t\tif(!err) { resolve([ channel, username, reason ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Clear all messages on a channel..\n\tclear(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/clear', (resolve, reject) => {\n\t\t\t// Received _promiseClear event, resolve or reject..\n\t\t\tthis.once('_promiseClear', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Change the color of your username..\n\tcolor(channel, newColor) {\n\t\tnewColor = _.get(newColor, channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, '#tmijs', `/color ${newColor}`, (resolve, reject) => {\n\t\t\t// Received _promiseColor event, resolve or reject..\n\t\t\tthis.once('_promiseColor', err => {\n\t\t\t\tif(!err) { resolve([ newColor ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Run commercial on a channel for X seconds..\n\tcommercial(channel, seconds) {\n\t\tchannel = _.channel(channel);\n\t\tseconds = _.get(seconds, 30);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/commercial ${seconds}`, (resolve, reject) => {\n\t\t\t// Received _promiseCommercial event, resolve or reject..\n\t\t\tthis.once('_promiseCommercial', err => {\n\t\t\t\tif(!err) { resolve([ channel, ~~seconds ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\t\n\t// Delete a specific message on a channel\n\tdeletemessage(channel, messageUUID) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/delete ${messageUUID}`, (resolve, reject) => {\n\t\t\t// Received _promiseDeletemessage event, resolve or reject..\n\t\t\tthis.once('_promiseDeletemessage', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Enable emote-only mode on a channel..\n\temoteonly(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/emoteonly', (resolve, reject) => {\n\t\t\t// Received _promiseEmoteonly event, resolve or reject..\n\t\t\tthis.once('_promiseEmoteonly', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Disable emote-only mode on a channel..\n\temoteonlyoff(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/emoteonlyoff', (resolve, reject) => {\n\t\t\t// Received _promiseEmoteonlyoff event, resolve or reject..\n\t\t\tthis.once('_promiseEmoteonlyoff', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Enable followers-only mode on a channel..\n\tfollowersonly,\n\n\t// Alias for followersonly()..\n\tfollowersmode: followersonly,\n\n\t// Disable followers-only mode on a channel..\n\tfollowersonlyoff,\n\n\t// Alias for followersonlyoff()..\n\tfollowersmodeoff: followersonlyoff,\n\n\t// Host a channel..\n\thost(channel, target) {\n\t\tchannel = _.channel(channel);\n\t\ttarget = _.username(target);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(2000, channel, `/host ${target}`, (resolve, reject) => {\n\t\t\t// Received _promiseHost event, resolve or reject..\n\t\t\tthis.once('_promiseHost', (err, remaining) => {\n\t\t\t\tif(!err) { resolve([ channel, target, ~~remaining ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Join a channel..\n\tjoin(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server ..\n\t\treturn this._sendCommand(undefined, null, `JOIN ${channel}`, (resolve, reject) => {\n\t\t\tconst eventName = '_promiseJoin';\n\t\t\tlet hasFulfilled = false;\n\t\t\tconst listener = (err, joinedChannel) => {\n\t\t\t\tif(channel === _.channel(joinedChannel)) {\n\t\t\t\t\t// Received _promiseJoin event for the target channel, resolve or reject..\n\t\t\t\t\tthis.removeListener(eventName, listener);\n\t\t\t\t\thasFulfilled = true;\n\t\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\t\telse { reject(err); }\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.on(eventName, listener);\n\t\t\t// Race the Promise against a delay..\n\t\t\tconst delay = this._getPromiseDelay();\n\t\t\t_.promiseDelay(delay).then(() => {\n\t\t\t\tif(!hasFulfilled) {\n\t\t\t\t\tthis.emit(eventName, 'No response from Twitch.', channel);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t// Mod username on channel..\n\tmod(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/mod ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseMod event, resolve or reject..\n\t\t\tthis.once('_promiseMod', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Get list of mods on a channel..\n\tmods(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/mods', (resolve, reject) => {\n\t\t\t// Received _promiseMods event, resolve or reject..\n\t\t\tthis.once('_promiseMods', (err, mods) => {\n\t\t\t\tif(!err) {\n\t\t\t\t\t// Update the internal list of moderators..\n\t\t\t\t\tmods.forEach(username => {\n\t\t\t\t\t\tif(!this.moderators[channel]) { this.moderators[channel] = []; }\n\t\t\t\t\t\tif(!this.moderators[channel].includes(username)) { this.moderators[channel].push(username); }\n\t\t\t\t\t});\n\t\t\t\t\tresolve(mods);\n\t\t\t\t}\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Leave a channel..\n\tpart,\n\n\t// Alias for part()..\n\tleave: part,\n\n\t// Send a ping to the server..\n\tping() {\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, null, 'PING', (resolve, _reject) => {\n\t\t\t// Update the internal ping timeout check interval..\n\t\t\tthis.latency = new Date();\n\t\t\tthis.pingTimeout = setTimeout(() => {\n\t\t\t\tif(this.ws !== null) {\n\t\t\t\t\tthis.wasCloseCalled = false;\n\t\t\t\t\tthis.log.error('Ping timeout.');\n\t\t\t\t\tthis.ws.close();\n\n\t\t\t\t\tclearInterval(this.pingLoop);\n\t\t\t\t\tclearTimeout(this.pingTimeout);\n\t\t\t\t}\n\t\t\t}, _.get(this.opts.connection.timeout, 9999));\n\n\t\t\t// Received _promisePing event, resolve or reject..\n\t\t\tthis.once('_promisePing', latency => resolve([ parseFloat(latency) ]));\n\t\t});\n\t},\n\n\t// Enable R9KBeta mode on a channel..\n\tr9kbeta,\n\n\t// Alias for r9kbeta()..\n\tr9kmode: r9kbeta,\n\n\t// Disable R9KBeta mode on a channel..\n\tr9kbetaoff,\n\n\t// Alias for r9kbetaoff()..\n\tr9kmodeoff: r9kbetaoff,\n\n\t// Send a raw message to the server..\n\traw(message) {\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, null, message, (resolve, _reject) => {\n\t\t\tresolve([ message ]);\n\t\t});\n\t},\n\n\t// Send a message on a channel..\n\tsay(channel, message) {\n\t\tchannel = _.channel(channel);\n\n\t\tif((message.startsWith('.') && !message.startsWith('..')) || message.startsWith('/') || message.startsWith('\\\\')) {\n\t\t\t// Check if the message is an action message..\n\t\t\tif(message.substr(1, 3) === 'me ') {\n\t\t\t\treturn this.action(channel, message.substr(4));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Send the command to the server and race the Promise against a delay..\n\t\t\t\treturn this._sendCommand(null, channel, message, (resolve, _reject) => {\n\t\t\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\t\t\tresolve([ channel, message ]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\tresolve([ channel, message ]);\n\t\t});\n\t},\n\n\t// Enable slow mode on a channel..\n\tslow,\n\n\t// Alias for slow()..\n\tslowmode: slow,\n\n\t// Disable slow mode on a channel..\n\tslowoff,\n\n\t// Alias for slowoff()..\n\tslowmodeoff: slowoff,\n\n\t// Enable subscribers mode on a channel..\n\tsubscribers(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/subscribers', (resolve, reject) => {\n\t\t\t// Received _promiseSubscribers event, resolve or reject..\n\t\t\tthis.once('_promiseSubscribers', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Disable subscribers mode on a channel..\n\tsubscribersoff(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/subscribersoff', (resolve, reject) => {\n\t\t\t// Received _promiseSubscribersoff event, resolve or reject..\n\t\t\tthis.once('_promiseSubscribersoff', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Timeout username on channel for X seconds..\n\ttimeout(channel, username, seconds, reason) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\n\t\tif(seconds !== null && !_.isInteger(seconds)) {\n\t\t\treason = seconds;\n\t\t\tseconds = 300;\n\t\t}\n\n\t\tseconds = _.get(seconds, 300);\n\t\treason = _.get(reason, '');\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/timeout ${username} ${seconds} ${reason}`, (resolve, reject) => {\n\t\t\t// Received _promiseTimeout event, resolve or reject..\n\t\t\tthis.once('_promiseTimeout', err => {\n\t\t\t\tif(!err) { resolve([ channel, username, ~~seconds, reason ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unban username on channel..\n\tunban(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/unban ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnban event, resolve or reject..\n\t\t\tthis.once('_promiseUnban', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// End the current hosting..\n\tunhost(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(2000, channel, '/unhost', (resolve, reject) => {\n\t\t\t// Received _promiseUnhost event, resolve or reject..\n\t\t\tthis.once('_promiseUnhost', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unmod username on channel..\n\tunmod(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/unmod ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnmod event, resolve or reject..\n\t\t\tthis.once('_promiseUnmod', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unvip username on channel..\n\tunvip(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/unvip ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnvip event, resolve or reject..\n\t\t\tthis.once('_promiseUnvip', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Add username to VIP list on channel..\n\tvip(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, `/vip ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseVip event, resolve or reject..\n\t\t\tthis.once('_promiseVip', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Get list of VIPs on a channel..\n\tvips(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, channel, '/vips', (resolve, reject) => {\n\t\t\t// Received _promiseVips event, resolve or reject..\n\t\t\tthis.once('_promiseVips', (err, vips) => {\n\t\t\t\tif(!err) { resolve(vips); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Send an whisper message to a user..\n\twhisper(username, message) {\n\t\tusername = _.username(username);\n\n\t\t// The server will not send a whisper to the account that sent it.\n\t\tif(username === this.getUsername()) {\n\t\t\treturn Promise.reject('Cannot send a whisper to the same account.');\n\t\t}\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(null, '#tmijs', `/w ${username} ${message}`, (_resolve, reject) => {\n\t\t\tthis.once('_promiseWhisper', err => {\n\t\t\t\tif (err) { reject(err); }\n\t\t\t});\n\t\t}).catch(err => {\n\t\t\t// Either an \"actual\" error occured or the timeout triggered\n\t\t\t// the latter means no errors have occured and we can resolve\n\t\t\t// else just elevate the error\n\t\t\tif(err && typeof err === 'string' && err.indexOf('No response from Twitch.') !== 0) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconst from = _.channel(username);\n\t\t\tconst userstate = Object.assign({\n\t\t\t\t'message-type': 'whisper',\n\t\t\t\t'message-id': null,\n\t\t\t\t'thread-id': null,\n\t\t\t\tusername: this.getUsername()\n\t\t\t}, this.globaluserstate);\n\n\t\t\t// Emit for both, whisper and message..\n\t\t\tthis.emits([ 'whisper', 'message' ], [\n\t\t\t\t[ from, userstate, message, true ],\n\t\t\t\t[ from, userstate, message, true ]\n\t\t\t]);\n\t\t\treturn [ username, message ];\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}