{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming Projects\\\\twitch-chat-combiner-js\\\\src\\\\Components\\\\Messages.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst tmi = require(\"tmi.js\");\n\nlet id = 0;\nconst client = new tmi.Client({\n  channels: [\"pigeonapology\"]\n});\nexport default _s(props => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  let tempArray = [];\n  client.connect();\n  client.on('message', (channel, tags, message, self) => {\n    // \"Alca: Hello, World!\"\n    let tempID = id;\n    id += 1;\n    tempArray.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          color: \"red\"\n        },\n        children: [channel, \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        style: {\n          color: tags.color\n        },\n        children: [tags[\"display-name\"], \": \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 56\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 116\n      }, this)]\n    }, void 0, true));\n    console.log(`${channel}: ${tags[\"display-name\"]}: ${message}`);\n    console.log(tags);\n    setMessages(tempArray);\n    console.log(messages);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((value, key) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");","map":{"version":3,"sources":["D:/Programming Projects/twitch-chat-combiner-js/src/Components/Messages.tsx"],"names":["useState","tmi","require","id","client","Client","channels","props","messages","setMessages","tempArray","connect","on","channel","tags","message","self","tempID","push","color","console","log","map","value","key"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,EAAE,GAAG,CAAT;AACA,MAAMC,MAAM,GAAG,IAAIH,GAAG,CAACI,MAAR,CAAe;AAC1BC,EAAAA,QAAQ,EAAE,CAAC,eAAD;AADgB,CAAf,CAAf;AAGA,kBAAgBC,KAAD,IAAiB;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAIU,SAAe,GAAG,EAAtB;AAEAN,EAAAA,MAAM,CAACO,OAAP;AACAP,EAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAqB,CAACC,OAAD,EAAmBC,IAAnB,EAA8BC,OAA9B,EAA+CC,IAA/C,KAA4D;AAC7E;AACA,QAAIC,MAAM,GAAGd,EAAb;AACAA,IAAAA,EAAE,IAAI,CAAN;AACAO,IAAAA,SAAS,CAACQ,IAAV,eACI;AAAA,8BAAE;AAAG,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAV;AAAA,mBAA2BN,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,eAA2C;AAAG,QAAA,KAAK,EAAE;AAACM,UAAAA,KAAK,EAAEL,IAAI,CAACK;AAAb,SAAV;AAAA,mBAAgCL,IAAI,CAAC,cAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3C,oBAAuG;AAAA,kBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,cAAvG;AAAA,oBADJ;AAGAK,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAER,OAAQ,KAAIC,IAAI,CAAC,cAAD,CAAiB,KAAIC,OAAQ,EAA5D;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAL,IAAAA,WAAW,CAACC,SAAD,CAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACH,GAXD;AAYA,sBACI;AAAA,2BACA;AAAA,gBACKA,QAAQ,CAACc,GAAT,CAAa,CAACC,KAAD,EAAQC,GAAR,kBAAiB;AAAA,kBAAeD;AAAf,SAASC,GAAT;AAAA;AAAA;AAAA;AAAA,cAA9B;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAOH,CAxBD","sourcesContent":["import { useState } from \"react\";\r\nconst tmi = require(\"tmi.js\");\r\nlet id = 0\r\nconst client = new tmi.Client({\r\n    channels: [\"pigeonapology\"]\r\n});\r\nexport default (props : any) => {\r\n    const [messages, setMessages] = useState([])\r\n    let tempArray : any = [];\r\n\r\n    client.connect();\r\n    client.on('message', (channel : string, tags: any, message: string, self:any) => {\r\n        // \"Alca: Hello, World!\"\r\n        let tempID = id;\r\n        id += 1;\r\n        tempArray.push(\r\n            <><b style={{color: \"red\"}}>{channel}: </b><b style={{color: tags.color}}>{tags[\"display-name\"]}: </b> <p>{message}</p></>\r\n        )\r\n        console.log(`${channel}: ${tags[\"display-name\"]}: ${message}`)\r\n        console.log(tags)\r\n        setMessages(tempArray)\r\n        console.log(messages)\r\n    });\r\n    return (\r\n        <>\r\n        <ul>\r\n            {messages.map((value, key) =>  <li key={key}>{value}</li>)}\r\n        </ul>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}